"use strict";
/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var arcgis_rest_request_1 = require("@esri/arcgis-rest-request");
var helpers_1 = require("./helpers");
/**
 * Send json to an item to be stored as the `/data` resource
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with an object reporting
 *        success/failure and echoing the item id.
 */
function addItemJsonData(requestOptions) {
    var owner = helpers_1.determineOwner(requestOptions);
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/update";
    // Portal API requires that the 'data' be stringified and POSTed in
    // a `text` form field. It can also be sent with the `.create` call by sending
    // a `.data` property.
    requestOptions.params = tslib_1.__assign({ text: JSON.stringify(requestOptions.data) }, requestOptions.params);
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.addItemJsonData = addItemJsonData;
/**
 * Send a file or blob to an item to be stored as the `/data` resource
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with an object reporting
 *        success/failure and echoing the item id.
 */
function addItemData(requestOptions) {
    var owner = helpers_1.determineOwner(requestOptions);
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/update";
    // Portal API requires that the 'data' be POSTed in a `file` form field.
    requestOptions.params = tslib_1.__assign({ file: requestOptions.data }, requestOptions.params);
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.addItemData = addItemData;
/**
 * Add a resource associated with an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to add item resources.
 */
function addItemResource(requestOptions) {
    var owner = helpers_1.determineOwner(requestOptions);
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/addResources";
    requestOptions.params = tslib_1.__assign({ file: requestOptions.resource, fileName: requestOptions.name, text: requestOptions.content, access: requestOptions.private ? "private" : "inherit" }, requestOptions.params);
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.addItemResource = addItemResource;
//# sourceMappingURL=add.js.map