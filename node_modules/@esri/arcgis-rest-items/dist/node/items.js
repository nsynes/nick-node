"use strict";
/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var arcgis_rest_request_1 = require("@esri/arcgis-rest-request");
/**
 * Search for items via the portal api
 *
 * ```js
 * import { searchItems } from '@esri/arcgis-rest-items';
 *
 * searchItems('water')
 * .then((results) => {
 *  console.log(results.total); // 355
 * })
 * ```
 *
 * @param search - A string or RequestOptions object to pass through to the endpoint.
 * @returns A Promise that will resolve with the data from the response.
 */
function searchItems(search) {
    var options = {
        httpMethod: "GET",
        params: {}
    };
    if (typeof search === "string") {
        options.params.q = search;
    }
    else {
        options.params = search.searchForm;
        // mixin, giving user supplied requestOptions precedence
        options = tslib_1.__assign({}, options, search);
    }
    // construct the search url
    var url = arcgis_rest_request_1.getPortalUrl(options) + "/search";
    // send the request
    return arcgis_rest_request_1.request(url, options);
}
exports.searchItems = searchItems;
/**
 * Create an item in a folder
 *
 * @param requestOptions = Options for the request
 */
function createItemInFolder(requestOptions) {
    var owner = determineOwner(requestOptions);
    var baseUrl = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/users/" + owner;
    var url = baseUrl + "/addItem";
    if (requestOptions.folder) {
        url = baseUrl + "/" + requestOptions.folder + "/addItem";
    }
    // serialize the item into something Portal will accept
    requestOptions.params = tslib_1.__assign({}, requestOptions.params, serializeItem(requestOptions.item));
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.createItemInFolder = createItemInFolder;
/**
 * Create an Item in the user's root folder
 *
 * ```js
 * import { createItem } from '@esri/arcgis-rest-items';
 *
 * createItem({
 *   authentication: userSession,
 *   item: {
 *     title: "The Amazing Voyage",
 *     type: "Webmap"
 *   }
 * })
 * ```
 *
 * @param requestOptions - Options for the request
 */
function createItem(requestOptions) {
    // delegate to createItemInFolder placing in the root of the filestore
    var options = tslib_1.__assign({ folder: null }, requestOptions);
    return createItemInFolder(options);
}
exports.createItem = createItem;
/**
 * Send json to an item to be stored as the `/data` resource
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with an object reporting
 *        success/failure and echoing the item id.
 */
function addItemJsonData(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/update";
    // Portal API requires that the 'data' be stringified and POSTed in
    // a `text` form field. It can also be sent with the `.create` call by sending
    // a `.data` property.
    requestOptions.params = tslib_1.__assign({ text: JSON.stringify(requestOptions.data) }, requestOptions.params);
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.addItemJsonData = addItemJsonData;
/**
 * Send a file or blob to an item to be stored as the `/data` resource
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with an object reporting
 *        success/failure and echoing the item id.
 */
function addItemData(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/update";
    // Portal API requires that the 'data' be POSTed in a `file` form field.
    requestOptions.params = tslib_1.__assign({ file: requestOptions.data }, requestOptions.params);
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.addItemData = addItemData;
/**
 * Get an item by id
 *
 * @param id - Item Id
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with the data from the response.
 */
function getItem(id, requestOptions) {
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/items/" + id;
    // default to a GET request
    var options = tslib_1.__assign({ httpMethod: "GET" }, requestOptions);
    return arcgis_rest_request_1.request(url, options);
}
exports.getItem = getItem;
/**
 * Get the /data for an item.
 * @param id - Item Id
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with the json data for the item.
 */
function getItemData(id, requestOptions) {
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/items/" + id + "/data";
    // default to a GET request
    var options = tslib_1.__assign({ httpMethod: "GET", params: {} }, requestOptions);
    if (options.file) {
        options.params.f = null;
    }
    return arcgis_rest_request_1.request(url, options);
}
exports.getItemData = getItemData;
/**
 * Update an Item
 *
 * * ```js
 * import { updateItem } from '@esri/arcgis-rest-items';
 *
 * updateItem({
 *   authentication: userSession,
 *   item: {
 *     id: "3ef",
 *     description: "A three hour tour"
 *   }
 * })
 * ```
 *
 * @param item - The item to update.
 * @param requestOptions - Options for the request.
 * @returns A Promise that resolves with the status of the operation.
 */
function updateItem(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.item.id + "/update";
    // serialize the item into something Portal will accept
    requestOptions.params = tslib_1.__assign({}, requestOptions.params, serializeItem(requestOptions.item));
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.updateItem = updateItem;
/**
 * Remove an item from the portal
 *
 * *
 * ```js
 * import { removeItem } from '@esri/arcgis-rest-items';
 *
 * removeItem({
 *   authentication: userSession,
 *   id: "3ef"
 * })
 * ```
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that deletes an item.
 */
function removeItem(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/delete";
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.removeItem = removeItem;
/**
 * Protect an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to protect an item.
 */
function protectItem(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/protect";
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.protectItem = protectItem;
/**
 * Unprotect an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to unprotect an item.
 */
function unprotectItem(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/unprotect";
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.unprotectItem = unprotectItem;
/**
 * Get the resources associated with an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to get some item resources.
 */
function getItemResources(requestOptions) {
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/items/" + requestOptions.id + "/resources";
    // mix in user supplied params
    requestOptions.params = tslib_1.__assign({}, requestOptions.params, { num: 1000 });
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.getItemResources = getItemResources;
/**
 * Update a resource associated with an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to unprotect an item.
 */
function updateItemResource(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/updateResources";
    // mix in user supplied params
    requestOptions.params = tslib_1.__assign({}, requestOptions.params, { fileName: requestOptions.name, text: requestOptions.content });
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.updateItemResource = updateItemResource;
/**
 * Remove a resource associated with an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to unprotect an item.
 */
function removeItemResource(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgis_rest_request_1.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/removeResources";
    // mix in user supplied params
    requestOptions.params = tslib_1.__assign({}, requestOptions.params, { resource: requestOptions.resource });
    return arcgis_rest_request_1.request(url, requestOptions);
}
exports.removeItemResource = removeItemResource;
/**
 * Serialize an item into a json format accepted by the Portal API
 * for create and update operations
 *
 * @param item Item to be serialized
 * @returns a formatted json object to be sent to Portal
 */
function serializeItem(item) {
    // create a clone so we're not messing with the original
    var clone = JSON.parse(JSON.stringify(item));
    // join keywords and tags...
    var _a = item.typeKeywords, typeKeywords = _a === void 0 ? [] : _a, _b = item.tags, tags = _b === void 0 ? [] : _b;
    clone.typeKeywords = typeKeywords.join(", ");
    clone.tags = tags.join(", ");
    // convert .data to .text
    if (clone.data) {
        clone.text = JSON.stringify(clone.data);
        delete clone.data;
    }
    // Convert properties to a string
    if (clone.properties) {
        clone.properties = JSON.stringify(clone.properties);
    }
    return clone;
}
/**
 * requestOptions.owner is given priority, requestOptions.item.owner will be checked next. If neither are present, authentication.username will be assumed.
 */
function determineOwner(requestOptions) {
    if (requestOptions.owner) {
        return requestOptions.owner;
    }
    if (requestOptions.item && requestOptions.item.owner) {
        return requestOptions.item.owner;
    }
    else {
        return requestOptions.authentication.username;
    }
}
//# sourceMappingURL=items.js.map