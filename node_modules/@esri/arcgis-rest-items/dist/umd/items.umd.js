/* @preserve
* @esri/arcgis-rest-items - v1.13.0 - Apache-2.0
* Copyright (c) 2017-2018 Esri, Inc.
* Tue Oct 09 2018 07:54:57 GMT-0700 (PDT)
*/
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@esri/arcgis-rest-request')) :
	typeof define === 'function' && define.amd ? define(['exports', '@esri/arcgis-rest-request'], factory) :
	(factory((global.arcgisRest = global.arcgisRest || {}),global.arcgisRest));
}(this, (function (exports,arcgisRestRequest) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */



var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};

/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
/**
 * Serialize an item into a json format accepted by the Portal API
 * for create and update operations
 *
 * @param item Item to be serialized
 * @returns a formatted json object to be sent to Portal
 */
function serializeItem(item) {
    // create a clone so we're not messing with the original
    var clone = JSON.parse(JSON.stringify(item));
    // join keywords and tags...
    var _a = item.typeKeywords, typeKeywords = _a === void 0 ? [] : _a, _b = item.tags, tags = _b === void 0 ? [] : _b;
    clone.typeKeywords = typeKeywords.join(", ");
    clone.tags = tags.join(", ");
    // convert .data to .text
    if (clone.data) {
        clone.text = JSON.stringify(clone.data);
        delete clone.data;
    }
    // Convert properties to a string
    if (clone.properties) {
        clone.properties = JSON.stringify(clone.properties);
    }
    return clone;
}
/**
 * requestOptions.owner is given priority, requestOptions.item.owner will be checked next. If neither are present, authentication.username will be assumed.
 */
function determineOwner(requestOptions) {
    if (requestOptions.owner) {
        return requestOptions.owner;
    }
    if (requestOptions.item && requestOptions.item.owner) {
        return requestOptions.item.owner;
    }
    else {
        return requestOptions.authentication.username;
    }
}

/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
/**
 * Send json to an item to be stored as the `/data` resource
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with an object reporting
 *        success/failure and echoing the item id.
 */
function addItemJsonData(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/update";
    // Portal API requires that the 'data' be stringified and POSTed in
    // a `text` form field. It can also be sent with the `.create` call by sending
    // a `.data` property.
    requestOptions.params = __assign({ text: JSON.stringify(requestOptions.data) }, requestOptions.params);
    return arcgisRestRequest.request(url, requestOptions);
}
/**
 * Send a file or blob to an item to be stored as the `/data` resource
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with an object reporting
 *        success/failure and echoing the item id.
 */
function addItemData(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/update";
    // Portal API requires that the 'data' be POSTed in a `file` form field.
    requestOptions.params = __assign({ file: requestOptions.data }, requestOptions.params);
    return arcgisRestRequest.request(url, requestOptions);
}
/**
 * Add a resource associated with an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to add item resources.
 */
function addItemResource(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/addResources";
    requestOptions.params = __assign({ file: requestOptions.resource, fileName: requestOptions.name, text: requestOptions.content, access: requestOptions.private ? "private" : "inherit" }, requestOptions.params);
    return arcgisRestRequest.request(url, requestOptions);
}

/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
/**
 * Create a folder
 *
 * ```js
 * import { createFolder } from '@esri/arcgis-rest-items';
 *
 * createFolder({
 *   title: 'Map Collection',
 *   authentication: userSession
 * }) ```
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that resolves with folder details once the folder has been created
 */
function createFolder(requestOptions) {
    var owner = determineOwner(requestOptions);
    var baseUrl = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/users/" + owner;
    var url = baseUrl + "/createFolder";
    requestOptions.params = __assign({ title: requestOptions.title }, requestOptions.params);
    return arcgisRestRequest.request(url, requestOptions);
}
/**
 * Create an item in a folder
 *
 * @param requestOptions = Options for the request
 */
function createItemInFolder(requestOptions) {
    var owner = determineOwner(requestOptions);
    var baseUrl = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/users/" + owner;
    var url = baseUrl + "/addItem";
    if (requestOptions.folder) {
        url = baseUrl + "/" + requestOptions.folder + "/addItem";
    }
    // serialize the item into something Portal will accept
    requestOptions.params = __assign({}, requestOptions.params, serializeItem(requestOptions.item));
    return arcgisRestRequest.request(url, requestOptions);
}
/**
 * Create an Item in the user's root folder
 *
 * ```js
 * import { createItem } from '@esri/arcgis-rest-items';
 *
 * createItem({
 *   authentication: userSession,
 *   item: {
 *     title: "The Amazing Voyage",
 *     type: "Web Map"
 *   }
 * })
 * ```
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that creates an item.
 */
function createItem(requestOptions) {
    // delegate to createItemInFolder placing in the root of the filestore
    var options = __assign({ folder: null }, requestOptions);
    return createItemInFolder(options);
}

/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
/**
 * Get an item by id
 *
 * @param id - Item Id
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with the data from the response.
 */
function getItem(id, requestOptions) {
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/items/" + id;
    // default to a GET request
    var options = __assign({ httpMethod: "GET" }, requestOptions);
    return arcgisRestRequest.request(url, options);
}
/**
 * Get the /data for an item.
 * @param id - Item Id
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with the json data for the item.
 */
function getItemData(id, requestOptions) {
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/items/" + id + "/data";
    // default to a GET request
    var options = __assign({ httpMethod: "GET", params: {} }, requestOptions);
    if (options.file) {
        options.params.f = null;
    }
    return arcgisRestRequest.request(url, options);
}
/**
 * Get the resources associated with an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to get some item resources.
 */
function getItemResources(requestOptions) {
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/items/" + requestOptions.id + "/resources";
    // mix in user supplied params
    requestOptions.params = __assign({}, requestOptions.params, { num: 1000 });
    return arcgisRestRequest.request(url, requestOptions);
}

/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
/**
 * Protect an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to protect an item.
 */
function protectItem(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/protect";
    return arcgisRestRequest.request(url, requestOptions);
}
/**
 * Unprotect an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to unprotect an item.
 */
function unprotectItem(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/unprotect";
    return arcgisRestRequest.request(url, requestOptions);
}

/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
/**
 * Remove an item from the portal
 *
 * *
 * ```js
 * import { removeItem } from '@esri/arcgis-rest-items';
 *
 * removeItem({
 *   authentication: userSession,
 *   id: "3ef"
 * })
 * ```
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that deletes an item.
 */
function removeItem(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/delete";
    return arcgisRestRequest.request(url, requestOptions);
}
/**
 * Remove a resource associated with an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that deletes an item resource.
 */
function removeItemResource(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/removeResources";
    // mix in user supplied params
    requestOptions.params = __assign({}, requestOptions.params, { resource: requestOptions.resource });
    return arcgisRestRequest.request(url, requestOptions);
}

/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
/**
 * Search for items via the portal api
 *
 * ```js
 * import { searchItems } from '@esri/arcgis-rest-items';
 *
 * searchItems('water')
 * .then((results) => {
 *  console.log(results.total); // 355
 * })
 * ```
 *
 * @param search - A string or RequestOptions object to pass through to the endpoint.
 * @returns A Promise that will resolve with the data from the response.
 */
function searchItems(search) {
    var options = {
        httpMethod: "GET",
        params: {}
    };
    if (typeof search === "string") {
        options.params.q = search;
    }
    else {
        // mixin user supplied requestOptions with defaults
        options = __assign({}, options, search);
        // mixin arbitrary request parameters with search form
        options.params = __assign({}, search.params, search.searchForm);
    }
    // construct the search url
    var url = arcgisRestRequest.getPortalUrl(options) + "/search";
    // send the request
    return arcgisRestRequest.request(url, options);
}

/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
/**
 * Update an Item
 *
 * * ```js
 * import { updateItem } from '@esri/arcgis-rest-items';
 *
 * updateItem({
 *   authentication: userSession,
 *   item: {
 *     id: "3ef",
 *     description: "A three hour tour"
 *   }
 * })
 * ```
 *
 * @param item - The item to update.
 * @param requestOptions - Options for the request.
 * @returns A Promise that updates an item.
 */
function updateItem(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.item.id + "/update";
    // serialize the item into something Portal will accept
    requestOptions.params = __assign({}, requestOptions.params, serializeItem(requestOptions.item));
    return arcgisRestRequest.request(url, requestOptions);
}
/**
 * Update a resource associated with an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that updates an item resource.
 */
function updateItemResource(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.id + "/updateResources";
    // mix in user supplied params
    requestOptions.params = __assign({ file: requestOptions.resource, fileName: requestOptions.name, text: requestOptions.content }, requestOptions.params);
    // only override whatever access was specified previously if 'private' was passed explicitly
    if (typeof requestOptions.private !== "undefined") {
        requestOptions.params.access = requestOptions.private
            ? "private"
            : "inherit";
    }
    return arcgisRestRequest.request(url, requestOptions);
}
/**
 * Move an item to a folder
 *
 * ```js
 * import { moveItem } from '@esri/arcgis-rest-items';
 *
 * moveItem({
 *   itemId: "3ef",
 *   folderId: "7c5",
 *   authentication: userSession
 * }) ```
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that resolves with owner and folder details once the move has been completed
 */
function moveItem(requestOptions) {
    var owner = determineOwner(requestOptions);
    var url = arcgisRestRequest.getPortalUrl(requestOptions) + "/content/users/" + owner + "/items/" + requestOptions.itemId + "/move";
    var folderId = requestOptions.folderId;
    if (!folderId) {
        folderId = "/";
    }
    requestOptions.params = __assign({ folder: folderId }, requestOptions.params);
    return arcgisRestRequest.request(url, requestOptions);
}

/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */

exports.addItemJsonData = addItemJsonData;
exports.addItemData = addItemData;
exports.addItemResource = addItemResource;
exports.createFolder = createFolder;
exports.createItemInFolder = createItemInFolder;
exports.createItem = createItem;
exports.getItem = getItem;
exports.getItemData = getItemData;
exports.getItemResources = getItemResources;
exports.protectItem = protectItem;
exports.unprotectItem = unprotectItem;
exports.removeItem = removeItem;
exports.removeItemResource = removeItemResource;
exports.searchItems = searchItems;
exports.updateItem = updateItem;
exports.updateItemResource = updateItemResource;
exports.moveItem = moveItem;
exports.serializeItem = serializeItem;
exports.determineOwner = determineOwner;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=items.umd.js.map
