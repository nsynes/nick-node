import { IRequestOptions } from "@esri/arcgis-rest-request";
import { IItemAdd, IItemUpdate, IItem, IPagingParams } from "@esri/arcgis-rest-common-types";
import { IUserRequestOptions } from "@esri/arcgis-rest-auth";
export interface IItemRequestOptions extends IUserRequestOptions {
    item: IItem;
}
export interface IItemIdRequestOptions extends IUserRequestOptions {
    /**
     * Unique identifier of the item.
     */
    id: string;
    /**
     * Item owner username. If not present, `authentication.username` is utilized.
     */
    owner?: string;
}
export interface IItemDataAddRequestOptions extends IItemIdRequestOptions {
    /**
     * Object to store
     */
    data: any;
}
export interface IItemResourceRequestOptions extends IItemIdRequestOptions {
    /**
     * New resource filename.
     */
    name?: string;
    /**
     * Text input to be added as a file resource.
     */
    content?: string;
    resource?: string;
}
export interface IItemCrudRequestOptions extends IUserRequestOptions {
    /**
     * The owner of the item. If this property is not present, `item.owner` will be passed, or lastly `authentication.username`.
     */
    owner?: string;
    /**
     * Id of the folder to house the item.
     */
    folder?: string;
}
export interface IItemAddRequestOptions extends IItemCrudRequestOptions {
    item: IItemAdd;
}
export interface IItemUpdateRequestOptions extends IItemCrudRequestOptions {
    item: IItemUpdate;
}
export interface ISearchRequest extends IPagingParams {
    q: string;
    [key: string]: any;
}
export interface ISearchRequestOptions extends IRequestOptions {
    searchForm?: ISearchRequest;
}
export interface IItemDataRequestOptions extends IRequestOptions {
    /**
     * Used to request binary data.
     */
    file?: boolean;
}
/**
 * Options to pass through when searching for items.
 */
export interface ISearchResult {
    query: string;
    total: number;
    start: number;
    num: number;
    nextStart: number;
    results: IItem[];
}
export interface IItemUpdateResponse {
    success: boolean;
    id: string;
}
export interface IItemAddResponse extends IItemUpdateResponse {
    folder: string;
}
/**
 * Search for items via the portal api
 *
 * ```js
 * import { searchItems } from '@esri/arcgis-rest-items';
 *
 * searchItems('water')
 * .then((results) => {
 *  console.log(results.total); // 355
 * })
 * ```
 *
 * @param search - A string or RequestOptions object to pass through to the endpoint.
 * @returns A Promise that will resolve with the data from the response.
 */
export declare function searchItems(search: string | ISearchRequestOptions): Promise<ISearchResult>;
/**
 * Create an item in a folder
 *
 * @param requestOptions = Options for the request
 */
export declare function createItemInFolder(requestOptions: IItemAddRequestOptions): Promise<IItemAddResponse>;
/**
 * Create an Item in the user's root folder
 *
 * ```js
 * import { createItem } from '@esri/arcgis-rest-items';
 *
 * createItem({
 *   authentication: userSession,
 *   item: {
 *     title: "The Amazing Voyage",
 *     type: "Webmap"
 *   }
 * })
 * ```
 *
 * @param requestOptions - Options for the request
 */
export declare function createItem(requestOptions: IItemAddRequestOptions): Promise<IItemAddResponse>;
/**
 * Send json to an item to be stored as the `/data` resource
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with an object reporting
 *        success/failure and echoing the item id.
 */
export declare function addItemJsonData(requestOptions: IItemDataAddRequestOptions): Promise<IItemUpdateResponse>;
/**
 * Send a file or blob to an item to be stored as the `/data` resource
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with an object reporting
 *        success/failure and echoing the item id.
 */
export declare function addItemData(requestOptions: IItemDataAddRequestOptions): Promise<IItemUpdateResponse>;
/**
 * Get an item by id
 *
 * @param id - Item Id
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with the data from the response.
 */
export declare function getItem(id: string, requestOptions?: IRequestOptions): Promise<IItem>;
/**
 * Get the /data for an item.
 * @param id - Item Id
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with the json data for the item.
 */
export declare function getItemData(id: string, requestOptions?: IItemDataRequestOptions): Promise<any>;
/**
 * Update an Item
 *
 * * ```js
 * import { updateItem } from '@esri/arcgis-rest-items';
 *
 * updateItem({
 *   authentication: userSession,
 *   item: {
 *     id: "3ef",
 *     description: "A three hour tour"
 *   }
 * })
 * ```
 *
 * @param item - The item to update.
 * @param requestOptions - Options for the request.
 * @returns A Promise that resolves with the status of the operation.
 */
export declare function updateItem(requestOptions: IItemUpdateRequestOptions): Promise<any>;
/**
 * Remove an item from the portal
 *
 * *
 * ```js
 * import { removeItem } from '@esri/arcgis-rest-items';
 *
 * removeItem({
 *   authentication: userSession,
 *   id: "3ef"
 * })
 * ```
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that deletes an item.
 */
export declare function removeItem(requestOptions: IItemIdRequestOptions): Promise<any>;
/**
 * Protect an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to protect an item.
 */
export declare function protectItem(requestOptions: IItemIdRequestOptions): Promise<any>;
/**
 * Unprotect an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to unprotect an item.
 */
export declare function unprotectItem(requestOptions: IItemIdRequestOptions): Promise<any>;
/**
 * Get the resources associated with an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to get some item resources.
 */
export declare function getItemResources(requestOptions: IItemIdRequestOptions): Promise<any>;
/**
 * Update a resource associated with an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to unprotect an item.
 */
export declare function updateItemResource(requestOptions: IItemResourceRequestOptions): Promise<any>;
/**
 * Remove a resource associated with an item
 *
 * @param requestOptions - Options for the request
 * @returns A Promise to unprotect an item.
 */
export declare function removeItemResource(requestOptions: IItemResourceRequestOptions): Promise<any>;
