{"version":3,"file":"auth.umd.min.js","sources":["../../src/fetch-token.ts","../../src/ApplicationSession.ts","../../src/generate-token.ts","../../src/UserSession.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  IFetchTokenParams,\n  ITokenRequestOptions\n} from \"@esri/arcgis-rest-request\";\n\ninterface IFetchTokenRawResponse {\n  access_token: string;\n  expires_in: number;\n  username: string;\n  ssl?: boolean;\n  refresh_token?: string;\n}\n\nexport interface IFetchTokenResponse {\n  token: string;\n  expires: Date;\n  username: string;\n  ssl: boolean;\n  refreshToken?: string;\n}\n\nexport function fetchToken(\n  url: string,\n  requestOptions: IFetchTokenParams | ITokenRequestOptions\n): Promise<IFetchTokenResponse> {\n  // TODO: remove union type and type guard next breaking change and just expect IGenerateTokenRequestOptions\n  const options: IRequestOptions = (requestOptions as ITokenRequestOptions)\n    .params\n    ? (requestOptions as IRequestOptions)\n    : { params: requestOptions };\n\n  return request(url, options).then((response: IFetchTokenRawResponse) => {\n    const r: IFetchTokenResponse = {\n      token: response.access_token,\n      username: response.username,\n      expires: new Date(\n        Date.now() + (response.expires_in * 60 * 1000 - 60 * 1000)\n      ),\n      ssl: response.ssl === true\n    };\n    if (response.refresh_token) {\n      r.refreshToken = response.refresh_token;\n    }\n\n    return r;\n  });\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  IAuthenticationManager,\n  ITokenRequestOptions\n} from \"@esri/arcgis-rest-request\";\nimport { fetchToken } from \"./fetch-token\";\n\nexport interface IApplicationSessionOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A Client Secret is also obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise. Treat it like a password.\n   */\n  clientSecret: string;\n\n  /**\n   * OAuth 2.0 access token from a previous application session.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  expires?: Date;\n}\n\n/**\n * ```js\n * // visit https://developers.arcgis.com to generate your own clientid and secret\n * const session = new ApplicationSession({\n *   clientId,\n *   clientSecret\n * })\n * ```\n * You can use [App Login](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/accessing-arcgis-online-services/) to access premium content and services in ArcGIS Online.\n * in `request`.\n *\n */\nexport class ApplicationSession implements IAuthenticationManager {\n  public portal: string;\n  private clientId: string;\n  private clientSecret: string;\n  private token: string;\n  private expires: Date;\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequest: Promise<string>;\n\n  constructor(options: IApplicationSessionOptions) {\n    this.clientId = options.clientId;\n    this.clientSecret = options.clientSecret;\n    this.token = options.token;\n    this.expires = options.expires;\n    this.portal = \"https://www.arcgis.com/sharing/rest\";\n  }\n\n  // url isnt actually read or passed through.\n  getToken(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ): Promise<string> {\n    if (this.token && this.expires && this.expires.getTime() > Date.now()) {\n      return Promise.resolve(this.token);\n    }\n\n    if (this._pendingTokenRequest) {\n      return this._pendingTokenRequest;\n    }\n\n    this._pendingTokenRequest = this.refreshToken(requestOptions);\n\n    return this._pendingTokenRequest;\n  }\n\n  refreshToken(requestOptions?: ITokenRequestOptions): Promise<string> {\n    const options = {\n      params: {\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        grant_type: \"client_credentials\"\n      },\n      ...requestOptions\n    };\n    return fetchToken(`${this.portal}/oauth2/token/`, options).then(\n      response => {\n        this._pendingTokenRequest = null;\n        this.token = response.token;\n        this.expires = response.expires;\n        return response.token;\n      }\n    );\n  }\n\n  refreshSession() {\n    return this.refreshToken().then(() => this);\n  }\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  IGenerateTokenParams,\n  ITokenRequestOptions\n} from \"@esri/arcgis-rest-request\";\n\nexport interface IGenerateTokenResponse {\n  token: string;\n  expires: number;\n  ssl: boolean;\n}\n\nexport function generateToken(\n  url: string,\n  requestOptions: IGenerateTokenParams | ITokenRequestOptions\n): Promise<IGenerateTokenResponse> {\n  // TODO: remove union type and type guard next breaking change and just expect IGenerateTokenRequestOptions\n  const options: IRequestOptions = (requestOptions as ITokenRequestOptions)\n    .params\n    ? (requestOptions as IRequestOptions)\n    : { params: requestOptions };\n\n  /* istanbul ignore else */\n  if (\n    typeof window !== \"undefined\" &&\n    window.location &&\n    window.location.host\n  ) {\n    options.params.referer = window.location.host;\n  } else {\n    options.params.referer = \"@esri.arcgis-rest-auth\";\n  }\n\n  return request(url, options);\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport * as http from \"http\";\nimport {\n  request,\n  IRequestOptions,\n  ArcGISAuthError,\n  IAuthenticationManager,\n  ITokenRequestOptions\n} from \"@esri/arcgis-rest-request\";\nimport { generateToken } from \"./generate-token\";\nimport { fetchToken, IFetchTokenResponse } from \"./fetch-token\";\nimport { IUser } from \"@esri/arcgis-rest-common-types\";\n\n/**\n * Internal utility for resolving a Promise from outside its constructor.\n *\n * See: http://lea.verou.me/2016/12/resolve-promises-externally-with-this-one-weird-trick/\n */\ninterface IDeferred<T> {\n  promise: Promise<T>;\n  resolve: (v: T) => void;\n  reject: (v: any) => void;\n}\n\nexport type AuthenticationProvider = \"arcgis\" | \"facebook\" | \"google\";\n\n/**\n * Represents a [credential]((https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html)) object used to access a secure ArcGIS resource.\n */\nexport interface ICredential {\n  expires: number;\n  server: string;\n  ssl: boolean;\n  token: string;\n  userId: string;\n}\n\nfunction defer<T>(): IDeferred<T> {\n  const deferred: any = {\n    promise: null,\n    resolve: null,\n    reject: null\n  };\n\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n\n  return deferred as IDeferred<T>;\n}\n\n/**\n * Options for static OAuth 2.0 helper methods on `UserSession`.\n */\nexport interface IOauth2Options {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri: string;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n  provider?: AuthenticationProvider;\n\n  /**\n   * Duration (in minutes) that a token will be valid. Defaults to 20160 (two weeks).\n   */\n  duration?: number;\n\n  /**\n   * Determines whether to open the authorization window in a new tab/window or in the current window.\n   *\n   * @browserOnly\n   */\n  popup?: boolean;\n\n  /**\n   * Duration (in minutes) that a refresh token will be valid.\n   *\n   * @nodeOnly\n   */\n  refreshTokenTTL?: number;\n\n  /**\n   * The locale assumed to render the login page.\n   *\n   * @browserOnly\n   */\n  locale?: string;\n\n  /**\n   * Applications can specify an opaque value for this parameter to correlate the authorization request sent with the received response. By default, clientId is used.\n   *\n   * @browserOnly\n   */\n  state?: string;\n}\n\n/**\n * Options for the `UserSession` constructor.\n */\nexport interface IUserSessionOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId?: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri?: string;\n\n  /**\n   * OAuth 2.0 refresh token from a previous user session.\n   */\n  refreshToken?: string;\n\n  /**\n   * Expiration date of the `refreshToken`\n   */\n  refreshTokenExpires?: Date;\n\n  /**\n   * The authenticated user's username. Guaranteed to be unique across ArcGIS Online or your instance of ArcGIS Enterprise.\n   */\n  username?: string;\n\n  /**\n   * Password for this user. Used in CLI apps where users cannot do OAuth 2.0.\n   */\n  password?: string;\n\n  /**\n   * OAuth 2.0 access token from a previous user session.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  tokenExpires?: Date;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  ssl?: boolean;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n  provider?: AuthenticationProvider;\n\n  /**\n   * Duration of requested token validity in minutes. Used when requesting tokens with `username` and `password` or when validating the identity of unknown servers. Defaults to two weeks.\n   */\n  tokenDuration?: number;\n\n  /**\n   * Duration (in minutes) that a refresh token will be valid.\n   */\n  refreshTokenTTL?: number;\n}\n\n/**\n * ```js\n * const session = new UserSession({\n *   username: \"jsmith\",\n *   password: \"123456\"\n * })\n * ```\n * Used to manage the authentication of ArcGIS Online and ArcGIS Enterprise users\n * in `request`. This class also includes several\n * helper methods for authenticating users with [OAuth 2.0](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/browser-based-user-logins/) in both browser and\n * server applications.\n *\n */\nexport class UserSession implements IAuthenticationManager {\n  /**\n   * Client ID being used for authentication if provided in the `constructor`.\n   */\n  readonly clientId: string;\n\n  /**\n   * The currently authenticated user if provided in the `constructor`.\n   */\n  readonly username: string;\n\n  /**\n   * The currently authenticated user's password if provided in the `constructor`.\n   */\n  readonly password: string;\n\n  /**\n   * The current portal the user is authenticated with.\n   */\n  readonly portal: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  readonly ssl: boolean;\n\n  /**\n   * The authentication provider to use.\n   */\n  readonly provider: AuthenticationProvider;\n\n  /**\n   * Determines how long new tokens requested are valid.\n   */\n  readonly tokenDuration: number;\n\n  /**\n   * A valid redirect URI for this application if provided in the `constructor`.\n   */\n  readonly redirectUri: string;\n\n  /**\n   * Duration of new OAuth 2.0 refresh token validity.\n   */\n  readonly refreshTokenTTL: number;\n\n  /**\n   * Hydrated by a call to [getUser()](#getUser-summary).\n   */\n  _user: IUser;\n\n  private _token: string;\n  private _tokenExpires: Date;\n  private _refreshToken: string;\n  private _refreshTokenExpires: Date;\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequests: {\n    [key: string]: Promise<string>;\n  };\n\n  /**\n   * Internal list of trusted 3rd party servers (federated servers) that have\n   *  been validated with `generateToken`.\n   */\n  private trustedServers: {\n    [key: string]: {\n      token: string;\n      expires: Date;\n    };\n  };\n\n  /**\n   * The current ArcGIS Online or ArcGIS Enterprise `token`.\n   */\n  get token() {\n    return this._token;\n  }\n\n  /**\n   * The expiration time of the current `token`.\n   */\n  get tokenExpires() {\n    return this._tokenExpires;\n  }\n\n  /**\n   * The current token to ArcGIS Online or ArcGIS Enterprise.\n   */\n  get refreshToken() {\n    return this._refreshToken;\n  }\n\n  /**\n   * The expiration time of the current `refreshToken`.\n   */\n  get refreshTokenExpires() {\n    return this._refreshTokenExpires;\n  }\n\n  constructor(options: IUserSessionOptions) {\n    this.clientId = options.clientId;\n    this._refreshToken = options.refreshToken;\n    this._refreshTokenExpires = options.refreshTokenExpires;\n    this.username = options.username;\n    this.password = options.password;\n    this._token = options.token;\n    this._tokenExpires = options.tokenExpires;\n    this.portal = options.portal || \"https://www.arcgis.com/sharing/rest\";\n    this.ssl = options.ssl;\n    this.provider = options.provider || \"arcgis\";\n    this.tokenDuration = options.tokenDuration || 20160;\n    this.redirectUri = options.redirectUri;\n    this.refreshTokenTTL = options.refreshTokenTTL || 1440;\n\n    this.trustedServers = {};\n    this._pendingTokenRequests = {};\n  }\n\n  /**\n   * Begins a new browser-based OAuth 2.0 sign in. If `options.popup` is true the\n   * authentication window will open in a new tab/window otherwise the user will\n   * be redirected to the authorization page in their current tab.\n   *\n   * @browserOnly\n   */\n  /* istanbul ignore next */\n  static beginOAuth2(options: IOauth2Options, win: any = window) {\n    const {\n      portal,\n      provider,\n      clientId,\n      duration,\n      redirectUri,\n      popup,\n      state,\n      locale\n    }: IOauth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        provider: \"arcgis\",\n        duration: 20160,\n        popup: true,\n        state: options.clientId,\n        locale: \"\"\n      },\n      ...options\n    };\n    let url: string;\n    if (provider === \"arcgis\") {\n      url = `${portal}/oauth2/authorize?client_id=${clientId}&response_type=token&expiration=${duration}&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}&state=${state}&locale=${locale}`;\n    } else {\n      url = `${portal}/oauth2/social/authorize?client_id=${clientId}&socialLoginProviderName=${provider}&autoAccountCreateForSocial=true&response_type=token&expiration=${duration}&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}&state=${state}&locale=${locale}`;\n    }\n\n    if (!popup) {\n      win.location.href = url;\n      return undefined;\n    }\n\n    const session = defer<UserSession>();\n\n    win[`__ESRI_REST_AUTH_HANDLER_${clientId}`] = function(\n      errorString: any,\n      oauthInfoString: string\n    ) {\n      if (errorString) {\n        const error = JSON.parse(errorString);\n        session.reject(new ArcGISAuthError(error.errorMessage, error.error));\n        return;\n      }\n\n      if (oauthInfoString) {\n        const oauthInfo = JSON.parse(oauthInfoString);\n        session.resolve(\n          new UserSession({\n            clientId,\n            portal,\n            ssl: oauthInfo.ssl,\n            token: oauthInfo.token,\n            tokenExpires: new Date(oauthInfo.expires),\n            username: oauthInfo.username\n          })\n        );\n      }\n    };\n\n    win.open(\n      url,\n      \"oauth-window\",\n      \"height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes\"\n    );\n\n    return session.promise;\n  }\n\n  /**\n   * Completes a browser-based OAuth 2.0 sign if `options.popup` is true the user\n   * will be returned to the previous window. Otherwise a new `UserSession`\n   * will be returned.\n   *\n   * @browserOnly\n   */\n  /* istanbul ignore next */\n  static completeOAuth2(options: IOauth2Options, win: any = window) {\n    const { portal, clientId }: IOauth2Options = {\n      ...{ portal: \"https://www.arcgis.com/sharing/rest\" },\n      ...options\n    };\n\n    function completeSignIn(error: any, oauthInfo?: IFetchTokenResponse) {\n      if (win.opener && win.opener.parent) {\n        win.opener.parent[`__ESRI_REST_AUTH_HANDLER_${clientId}`](\n          error ? JSON.stringify(error) : undefined,\n          JSON.stringify(oauthInfo)\n        );\n        win.close();\n        return undefined;\n      }\n\n      if (win !== win.parent) {\n        win.parent[`__ESRI_REST_AUTH_HANDLER_${clientId}`](\n          error ? JSON.stringify(error) : undefined,\n          JSON.stringify(oauthInfo)\n        );\n        win.close();\n        return undefined;\n      }\n\n      if (error) {\n        throw new ArcGISAuthError(error.errorMessage, error.error);\n      }\n\n      return new UserSession({\n        clientId,\n        portal,\n        ssl: oauthInfo.ssl,\n        token: oauthInfo.token,\n        tokenExpires: oauthInfo.expires,\n        username: oauthInfo.username\n      });\n    }\n\n    const match = win.location.href.match(\n      /access_token=(.+)&expires_in=(.+)&username=([^&]+)/\n    );\n\n    if (!match) {\n      const errorMatch = win.location.href.match(\n        /error=(.+)&error_description=(.+)/\n      );\n\n      const error = errorMatch[1];\n      const errorMessage = decodeURIComponent(errorMatch[2]);\n\n      return completeSignIn({ error, errorMessage });\n    }\n\n    const token = match[1];\n    const expires = new Date(\n      Date.now() + parseInt(match[2], 10) * 1000 - 60 * 1000\n    );\n    const username = decodeURIComponent(match[3]);\n    const ssl =\n      win.location.href.indexOf(\"&ssl=true\") > -1 ||\n      win.location.href.indexOf(\"#ssl=true\") > -1;\n\n    return completeSignIn(undefined, {\n      token,\n      expires,\n      ssl,\n      username\n    });\n  }\n\n  /**\n   * Begins a new server-based OAuth 2.0 sign in. This will redirect the user to\n   * the ArcGIS Online or ArcGIS Enterprise authorization page.\n   *\n   * @nodeOnly\n   */\n  static authorize(options: IOauth2Options, response: http.ServerResponse) {\n    const { portal, clientId, duration, redirectUri }: IOauth2Options = {\n      ...{ portal: \"https://arcgis.com/sharing/rest\", duration: 20160 },\n      ...options\n    };\n\n    response.writeHead(301, {\n      Location: `${portal}/oauth2/authorize?client_id=${clientId}&duration=${duration}&response_type=code&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}`\n    });\n\n    response.end();\n  }\n\n  /**\n   * Completes the server-based OAuth 2.0 sign in process by exchanging the `authorizationCode`\n   * for a `access_token`.\n   *\n   * @nodeOnly\n   */\n  static exchangeAuthorizationCode(\n    options: IOauth2Options,\n    authorizationCode: string\n  ): Promise<UserSession> {\n    const { portal, clientId, redirectUri, refreshTokenTTL }: IOauth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        refreshTokenTTL: 1440\n      },\n      ...options\n    };\n\n    return fetchToken(`${portal}/oauth2/token`, {\n      grant_type: \"authorization_code\",\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      code: authorizationCode\n    }).then(response => {\n      return new UserSession({\n        clientId,\n        portal,\n        ssl: response.ssl,\n        redirectUri,\n        refreshToken: response.refreshToken,\n        refreshTokenTTL,\n        refreshTokenExpires: new Date(\n          Date.now() + (refreshTokenTTL - 1) * 1000\n        ),\n        token: response.token,\n        tokenExpires: response.expires,\n        username: response.username\n      });\n    });\n  }\n\n  static deserialize(str: string) {\n    const options = JSON.parse(str);\n    return new UserSession({\n      clientId: options.clientId,\n      refreshToken: options.refreshToken,\n      refreshTokenExpires: new Date(options.refreshTokenExpires),\n      username: options.username,\n      password: options.password,\n      token: options.token,\n      tokenExpires: new Date(options.tokenExpires),\n      portal: options.portal,\n      ssl: options.ssl,\n      tokenDuration: options.tokenDuration,\n      redirectUri: options.redirectUri,\n      refreshTokenTTL: options.refreshTokenTTL\n    });\n  }\n\n  /**\n   * Translates authentication from the format used in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n   *\n   * ```js\n   * UserSession.fromCredential({\n   *   userId: \"jsmith\",\n   *   token: \"secret\"\n   * });\n   * ```\n   *\n   * @returns UserSession\n   */\n  static fromCredential(credential: ICredential) {\n    return new UserSession({\n      portal: credential.server + `/sharing/rest`,\n      ssl: credential.ssl,\n      token: credential.token,\n      username: credential.userId,\n      tokenExpires: new Date(credential.expires)\n    });\n  }\n\n  /**\n   * Returns authentication in a format useable in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n   *\n   * ```js\n   * esriId.registerToken(session.toCredential());\n   * ```\n   *\n   * @returns ICredential\n   */\n  toCredential(): ICredential {\n    return {\n      expires: this.tokenExpires.getTime(),\n      server: this.portal,\n      ssl: this.ssl,\n      token: this.token,\n      userId: this.username\n    };\n  }\n\n  /**\n   * Returns information about the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic.\n   *\n   * ```js\n   * session.getUser()\n   *   .then(response => {\n   *     console.log(response.role); // \"org_admin\"\n   *   })\n   * ```\n   *\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  getUser(requestOptions?: IRequestOptions): Promise<IUser> {\n    if (this._user && this._user.username === this.username) {\n      return Promise.resolve(this._user);\n    } else {\n      const url = `${this.portal}/community/users/${encodeURIComponent(\n        this.username\n      )}`;\n\n      const options = {\n        httpMethod: \"GET\",\n        authentication: this,\n        ...requestOptions\n      } as IRequestOptions;\n      return request(url, options).then(response => {\n        this._user = response;\n        return response;\n      });\n    }\n  }\n\n  /**\n   * Gets an appropriate token for the given URL. If `portal` is ArcGIS Online and\n   * the request is to an ArcGIS Online domain `token` will be used. If the request\n   * is to the current `portal` the current `token` will also be used. However if\n   * the request is to an unknown server we will validate the server with a request\n   * to our current `portal`.\n   */\n  getToken(url: string, requestOptions?: ITokenRequestOptions) {\n    if (\n      /^https?:\\/\\/\\S+\\.arcgis\\.com\\/sharing\\/rest/.test(this.portal) &&\n      /^https?:\\/\\/\\S+\\.arcgis\\.com.+/.test(url)\n    ) {\n      return this.getFreshToken(requestOptions);\n    } else if (new RegExp(this.portal).test(url)) {\n      return this.getFreshToken(requestOptions);\n    } else {\n      return this.getTokenForServer(url, requestOptions);\n    }\n  }\n\n  toJSON(): IUserSessionOptions {\n    return {\n      clientId: this.clientId,\n      refreshToken: this.refreshToken,\n      refreshTokenExpires: this.refreshTokenExpires,\n      username: this.username,\n      password: this.password,\n      token: this.token,\n      tokenExpires: this.tokenExpires,\n      portal: this.portal,\n      ssl: this.ssl,\n      tokenDuration: this.tokenDuration,\n      redirectUri: this.redirectUri,\n      refreshTokenTTL: this.refreshTokenTTL\n    };\n  }\n\n  serialize() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Manually refreshes the current `token` and `tokenExpires`.\n   */\n  refreshSession(requestOptions?: ITokenRequestOptions): Promise<UserSession> {\n    if (this.username && this.password) {\n      return this.refreshWithUsernameAndPassword(requestOptions);\n    }\n\n    if (this.clientId && this.refreshToken) {\n      return this.refreshWithRefreshToken();\n    }\n\n    return Promise.reject(new ArcGISAuthError(\"Unable to refresh token.\"));\n  }\n\n  /**\n   * Validates that a given URL is properly federated with our current `portal`.\n   * Attempts to use the internal `trustedServers` cache first.\n   */\n  private getTokenForServer(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ) {\n    // requests to /rest/services/ and /rest/admin/services/ are both valid\n    const [root] = url.split(/\\/rest(\\/admin)?\\/services\\//);\n    const existingToken = this.trustedServers[root];\n\n    if (existingToken && existingToken.expires.getTime() > Date.now()) {\n      return Promise.resolve(existingToken.token);\n    }\n\n    if (this._pendingTokenRequests[root]) {\n      return this._pendingTokenRequests[root];\n    }\n\n    this._pendingTokenRequests[root] = request(`${root}/rest/info`)\n      .then((response: any) => {\n        return response.owningSystemUrl;\n      })\n      .then(owningSystemUrl => {\n        /**\n         * if this server is not owned by this portal or the stand-alone\n         * instance of ArcGIS Server doesn't advertise federation,\n         * bail out with an error since we know we wont\n         * be able to generate a token\n         */\n        if (\n          !owningSystemUrl ||\n          !new RegExp(owningSystemUrl).test(this.portal)\n        ) {\n          throw new ArcGISAuthError(\n            `${url} is not federated with ${this.portal}.`,\n            \"NOT_FEDERATED\"\n          );\n        }\n        return request(`${owningSystemUrl}/sharing/rest/info`, requestOptions);\n      })\n      .then((response: any) => {\n        return response.authInfo.tokenServicesUrl;\n      })\n      .then((tokenServicesUrl: string) => {\n        if (this.token) {\n          return generateToken(tokenServicesUrl, {\n            params: {\n              token: this.token,\n              serverUrl: url,\n              expiration: this.tokenDuration\n            }\n          });\n          // generate an entirely fresh token if necessary\n        } else {\n          return generateToken(tokenServicesUrl, {\n            params: {\n              username: this.username,\n              password: this.password,\n              expiration: this.tokenDuration\n            }\n          }).then((response: any) => {\n            this._token = response.token;\n            this._tokenExpires = new Date(response.expires);\n            return response;\n          });\n        }\n      })\n      .then(response => {\n        this.trustedServers[root] = {\n          expires: new Date(response.expires),\n          token: response.token\n        };\n        return response.token;\n      });\n\n    return this._pendingTokenRequests[root];\n  }\n\n  /**\n   * Returns an unexpired token for the current `portal`.\n   */\n  private getFreshToken(requestOptions?: ITokenRequestOptions) {\n    if (\n      this.token &&\n      this.tokenExpires &&\n      this.tokenExpires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(this.token);\n    }\n\n    if (!this._pendingTokenRequests[this.portal]) {\n      this._pendingTokenRequests[this.portal] = this.refreshSession(\n        requestOptions\n      ).then(session => {\n        this._pendingTokenRequests[this.portal] = null;\n        return session.token;\n      });\n    }\n\n    return this._pendingTokenRequests[this.portal];\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `username` and\n   * `password`.\n   */\n  private refreshWithUsernameAndPassword(\n    requestOptions?: ITokenRequestOptions\n  ) {\n    const options = {\n      params: {\n        username: this.username,\n        password: this.password,\n        expiration: this.tokenDuration\n      },\n      ...requestOptions\n    };\n    return generateToken(`${this.portal}/generateToken`, options).then(\n      (response: any) => {\n        this._token = response.token;\n        this._tokenExpires = new Date(response.expires);\n        return this;\n      }\n    );\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `refreshToken`.\n   */\n  private refreshWithRefreshToken(requestOptions?: ITokenRequestOptions) {\n    if (\n      this.refreshToken &&\n      this.refreshTokenExpires &&\n      this.refreshTokenExpires.getTime() < Date.now()\n    ) {\n      return this.refreshRefreshToken(requestOptions);\n    }\n\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        grant_type: \"refresh_token\"\n      },\n      ...requestOptions\n    };\n    return fetchToken(`${this.portal}/oauth2/token`, options).then(response => {\n      this._token = response.token;\n      this._tokenExpires = response.expires;\n      return this;\n    });\n  }\n\n  /**\n   * Exchanges an expired `refreshToken` for a new one also updates `token` and\n   * `tokenExpires`.\n   */\n  private refreshRefreshToken(requestOptions?: ITokenRequestOptions) {\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        redirect_uri: this.redirectUri,\n        grant_type: \"exchange_refresh_token\"\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token`, options).then(response => {\n      this._token = response.token;\n      this._tokenExpires = response.expires;\n      this._refreshToken = response.refreshToken;\n      this._refreshTokenExpires = new Date(\n        Date.now() + (this.refreshTokenTTL - 1) * 60 * 1000\n      );\n      return this;\n    });\n  }\n}\n"],"names":["url","requestOptions","options","params","request","then","response","r","token","access_token","username","expires","Date","now","expires_in","ssl","refresh_token","refreshToken","this","clientId","clientSecret","portal","ApplicationSession","getTime","Promise","resolve","_pendingTokenRequest","client_id","client_secret","grant_type","fetchToken","_this","window","location","host","referer","_refreshToken","_refreshTokenExpires","refreshTokenExpires","password","_token","_tokenExpires","tokenExpires","provider","tokenDuration","redirectUri","refreshTokenTTL","trustedServers","_pendingTokenRequests","Object","UserSession","win","_a","duration","popup","state","locale","encodeURIComponent","deferred","session","promise","reject","errorString","oauthInfoString","error","JSON","parse","ArcGISAuthError","errorMessage","oauthInfo","open","href","opener","parent","stringify","undefined","close","match","errorMatch","completeSignIn","decodeURIComponent","parseInt","indexOf","writeHead","Location","end","authorizationCode","redirect_uri","code","str","credential","server","userId","_user","tslib_1.__assign","httpMethod","authentication","test","getFreshToken","RegExp","getTokenForServer","refreshWithUsernameAndPassword","refreshWithRefreshToken","root","existingToken","owningSystemUrl","authInfo","tokenServicesUrl","generateToken","serverUrl","expiration","refreshSession","refreshRefreshToken"],"mappings":"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"}