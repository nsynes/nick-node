{"version":3,"file":"auth.umd.js","sources":["../../src/fetch-token.ts","../../src/ApplicationSession.ts","../../src/generate-token.ts","../../src/UserSession.ts","../../src/index.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  IFetchTokenParams,\n  ITokenRequestOptions\n} from \"@esri/arcgis-rest-request\";\n\ninterface IFetchTokenRawResponse {\n  access_token: string;\n  expires_in: number;\n  username: string;\n  ssl?: boolean;\n  refresh_token?: string;\n}\n\nexport interface IFetchTokenResponse {\n  token: string;\n  expires: Date;\n  username: string;\n  ssl: boolean;\n  refreshToken?: string;\n}\n\nexport function fetchToken(\n  url: string,\n  requestOptions: IFetchTokenParams | ITokenRequestOptions\n): Promise<IFetchTokenResponse> {\n  // TODO: remove union type and type guard next breaking change and just expect IGenerateTokenRequestOptions\n  const options: IRequestOptions = (requestOptions as ITokenRequestOptions)\n    .params\n    ? (requestOptions as IRequestOptions)\n    : { params: requestOptions };\n\n  return request(url, options).then((response: IFetchTokenRawResponse) => {\n    const r: IFetchTokenResponse = {\n      token: response.access_token,\n      username: response.username,\n      expires: new Date(\n        Date.now() + (response.expires_in * 60 * 1000 - 60 * 1000)\n      ),\n      ssl: response.ssl === true\n    };\n    if (response.refresh_token) {\n      r.refreshToken = response.refresh_token;\n    }\n\n    return r;\n  });\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  IAuthenticationManager,\n  ITokenRequestOptions\n} from \"@esri/arcgis-rest-request\";\nimport { fetchToken } from \"./fetch-token\";\n\nexport interface IApplicationSessionOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A Client Secret is also obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise. Treat it like a password.\n   */\n  clientSecret: string;\n\n  /**\n   * OAuth 2.0 access token from a previous application session.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  expires?: Date;\n}\n\n/**\n * ```js\n * // visit https://developers.arcgis.com to generate your own clientid and secret\n * const session = new ApplicationSession({\n *   clientId,\n *   clientSecret\n * })\n * ```\n * You can use [App Login](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/accessing-arcgis-online-services/) to access premium content and services in ArcGIS Online.\n * in `request`.\n *\n */\nexport class ApplicationSession implements IAuthenticationManager {\n  public portal: string;\n  private clientId: string;\n  private clientSecret: string;\n  private token: string;\n  private expires: Date;\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequest: Promise<string>;\n\n  constructor(options: IApplicationSessionOptions) {\n    this.clientId = options.clientId;\n    this.clientSecret = options.clientSecret;\n    this.token = options.token;\n    this.expires = options.expires;\n    this.portal = \"https://www.arcgis.com/sharing/rest\";\n  }\n\n  // url isnt actually read or passed through.\n  getToken(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ): Promise<string> {\n    if (this.token && this.expires && this.expires.getTime() > Date.now()) {\n      return Promise.resolve(this.token);\n    }\n\n    if (this._pendingTokenRequest) {\n      return this._pendingTokenRequest;\n    }\n\n    this._pendingTokenRequest = this.refreshToken(requestOptions);\n\n    return this._pendingTokenRequest;\n  }\n\n  refreshToken(requestOptions?: ITokenRequestOptions): Promise<string> {\n    const options = {\n      params: {\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        grant_type: \"client_credentials\"\n      },\n      ...requestOptions\n    };\n    return fetchToken(`${this.portal}/oauth2/token/`, options).then(\n      response => {\n        this._pendingTokenRequest = null;\n        this.token = response.token;\n        this.expires = response.expires;\n        return response.token;\n      }\n    );\n  }\n\n  refreshSession() {\n    return this.refreshToken().then(() => this);\n  }\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IRequestOptions,\n  IGenerateTokenParams,\n  ITokenRequestOptions\n} from \"@esri/arcgis-rest-request\";\n\nexport interface IGenerateTokenResponse {\n  token: string;\n  expires: number;\n  ssl: boolean;\n}\n\nexport function generateToken(\n  url: string,\n  requestOptions: IGenerateTokenParams | ITokenRequestOptions\n): Promise<IGenerateTokenResponse> {\n  // TODO: remove union type and type guard next breaking change and just expect IGenerateTokenRequestOptions\n  const options: IRequestOptions = (requestOptions as ITokenRequestOptions)\n    .params\n    ? (requestOptions as IRequestOptions)\n    : { params: requestOptions };\n\n  /* istanbul ignore else */\n  if (\n    typeof window !== \"undefined\" &&\n    window.location &&\n    window.location.host\n  ) {\n    options.params.referer = window.location.host;\n  } else {\n    options.params.referer = \"@esri.arcgis-rest-auth\";\n  }\n\n  return request(url, options);\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport * as http from \"http\";\nimport {\n  request,\n  IRequestOptions,\n  ArcGISAuthError,\n  IAuthenticationManager,\n  ITokenRequestOptions\n} from \"@esri/arcgis-rest-request\";\nimport { generateToken } from \"./generate-token\";\nimport { fetchToken, IFetchTokenResponse } from \"./fetch-token\";\nimport { IUser } from \"@esri/arcgis-rest-common-types\";\n\n/**\n * Internal utility for resolving a Promise from outside its constructor.\n *\n * See: http://lea.verou.me/2016/12/resolve-promises-externally-with-this-one-weird-trick/\n */\ninterface IDeferred<T> {\n  promise: Promise<T>;\n  resolve: (v: T) => void;\n  reject: (v: any) => void;\n}\n\nexport type AuthenticationProvider = \"arcgis\" | \"facebook\" | \"google\";\n\n/**\n * Represents a [credential]((https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html)) object used to access a secure ArcGIS resource.\n */\nexport interface ICredential {\n  expires: number;\n  server: string;\n  ssl: boolean;\n  token: string;\n  userId: string;\n}\n\nfunction defer<T>(): IDeferred<T> {\n  const deferred: any = {\n    promise: null,\n    resolve: null,\n    reject: null\n  };\n\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n\n  return deferred as IDeferred<T>;\n}\n\n/**\n * Options for static OAuth 2.0 helper methods on `UserSession`.\n */\nexport interface IOauth2Options {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri: string;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n  provider?: AuthenticationProvider;\n\n  /**\n   * Duration (in minutes) that a token will be valid. Defaults to 20160 (two weeks).\n   */\n  duration?: number;\n\n  /**\n   * Determines whether to open the authorization window in a new tab/window or in the current window.\n   *\n   * @browserOnly\n   */\n  popup?: boolean;\n\n  /**\n   * Duration (in minutes) that a refresh token will be valid.\n   *\n   * @nodeOnly\n   */\n  refreshTokenTTL?: number;\n\n  /**\n   * The locale assumed to render the login page.\n   *\n   * @browserOnly\n   */\n  locale?: string;\n\n  /**\n   * Applications can specify an opaque value for this parameter to correlate the authorization request sent with the received response. By default, clientId is used.\n   *\n   * @browserOnly\n   */\n  state?: string;\n}\n\n/**\n * Options for the `UserSession` constructor.\n */\nexport interface IUserSessionOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId?: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri?: string;\n\n  /**\n   * OAuth 2.0 refresh token from a previous user session.\n   */\n  refreshToken?: string;\n\n  /**\n   * Expiration date of the `refreshToken`\n   */\n  refreshTokenExpires?: Date;\n\n  /**\n   * The authenticated user's username. Guaranteed to be unique across ArcGIS Online or your instance of ArcGIS Enterprise.\n   */\n  username?: string;\n\n  /**\n   * Password for this user. Used in CLI apps where users cannot do OAuth 2.0.\n   */\n  password?: string;\n\n  /**\n   * OAuth 2.0 access token from a previous user session.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  tokenExpires?: Date;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  ssl?: boolean;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n  provider?: AuthenticationProvider;\n\n  /**\n   * Duration of requested token validity in minutes. Used when requesting tokens with `username` and `password` or when validating the identity of unknown servers. Defaults to two weeks.\n   */\n  tokenDuration?: number;\n\n  /**\n   * Duration (in minutes) that a refresh token will be valid.\n   */\n  refreshTokenTTL?: number;\n}\n\n/**\n * ```js\n * const session = new UserSession({\n *   username: \"jsmith\",\n *   password: \"123456\"\n * })\n * ```\n * Used to manage the authentication of ArcGIS Online and ArcGIS Enterprise users\n * in `request`. This class also includes several\n * helper methods for authenticating users with [OAuth 2.0](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/browser-based-user-logins/) in both browser and\n * server applications.\n *\n */\nexport class UserSession implements IAuthenticationManager {\n  /**\n   * Client ID being used for authentication if provided in the `constructor`.\n   */\n  readonly clientId: string;\n\n  /**\n   * The currently authenticated user if provided in the `constructor`.\n   */\n  readonly username: string;\n\n  /**\n   * The currently authenticated user's password if provided in the `constructor`.\n   */\n  readonly password: string;\n\n  /**\n   * The current portal the user is authenticated with.\n   */\n  readonly portal: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  readonly ssl: boolean;\n\n  /**\n   * The authentication provider to use.\n   */\n  readonly provider: AuthenticationProvider;\n\n  /**\n   * Determines how long new tokens requested are valid.\n   */\n  readonly tokenDuration: number;\n\n  /**\n   * A valid redirect URI for this application if provided in the `constructor`.\n   */\n  readonly redirectUri: string;\n\n  /**\n   * Duration of new OAuth 2.0 refresh token validity.\n   */\n  readonly refreshTokenTTL: number;\n\n  /**\n   * Hydrated by a call to [getUser()](#getUser-summary).\n   */\n  _user: IUser;\n\n  private _token: string;\n  private _tokenExpires: Date;\n  private _refreshToken: string;\n  private _refreshTokenExpires: Date;\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequests: {\n    [key: string]: Promise<string>;\n  };\n\n  /**\n   * Internal list of trusted 3rd party servers (federated servers) that have\n   *  been validated with `generateToken`.\n   */\n  private trustedServers: {\n    [key: string]: {\n      token: string;\n      expires: Date;\n    };\n  };\n\n  /**\n   * The current ArcGIS Online or ArcGIS Enterprise `token`.\n   */\n  get token() {\n    return this._token;\n  }\n\n  /**\n   * The expiration time of the current `token`.\n   */\n  get tokenExpires() {\n    return this._tokenExpires;\n  }\n\n  /**\n   * The current token to ArcGIS Online or ArcGIS Enterprise.\n   */\n  get refreshToken() {\n    return this._refreshToken;\n  }\n\n  /**\n   * The expiration time of the current `refreshToken`.\n   */\n  get refreshTokenExpires() {\n    return this._refreshTokenExpires;\n  }\n\n  constructor(options: IUserSessionOptions) {\n    this.clientId = options.clientId;\n    this._refreshToken = options.refreshToken;\n    this._refreshTokenExpires = options.refreshTokenExpires;\n    this.username = options.username;\n    this.password = options.password;\n    this._token = options.token;\n    this._tokenExpires = options.tokenExpires;\n    this.portal = options.portal || \"https://www.arcgis.com/sharing/rest\";\n    this.ssl = options.ssl;\n    this.provider = options.provider || \"arcgis\";\n    this.tokenDuration = options.tokenDuration || 20160;\n    this.redirectUri = options.redirectUri;\n    this.refreshTokenTTL = options.refreshTokenTTL || 1440;\n\n    this.trustedServers = {};\n    this._pendingTokenRequests = {};\n  }\n\n  /**\n   * Begins a new browser-based OAuth 2.0 sign in. If `options.popup` is true the\n   * authentication window will open in a new tab/window otherwise the user will\n   * be redirected to the authorization page in their current tab.\n   *\n   * @browserOnly\n   */\n  /* istanbul ignore next */\n  static beginOAuth2(options: IOauth2Options, win: any = window) {\n    const {\n      portal,\n      provider,\n      clientId,\n      duration,\n      redirectUri,\n      popup,\n      state,\n      locale\n    }: IOauth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        provider: \"arcgis\",\n        duration: 20160,\n        popup: true,\n        state: options.clientId,\n        locale: \"\"\n      },\n      ...options\n    };\n    let url: string;\n    if (provider === \"arcgis\") {\n      url = `${portal}/oauth2/authorize?client_id=${clientId}&response_type=token&expiration=${duration}&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}&state=${state}&locale=${locale}`;\n    } else {\n      url = `${portal}/oauth2/social/authorize?client_id=${clientId}&socialLoginProviderName=${provider}&autoAccountCreateForSocial=true&response_type=token&expiration=${duration}&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}&state=${state}&locale=${locale}`;\n    }\n\n    if (!popup) {\n      win.location.href = url;\n      return undefined;\n    }\n\n    const session = defer<UserSession>();\n\n    win[`__ESRI_REST_AUTH_HANDLER_${clientId}`] = function(\n      errorString: any,\n      oauthInfoString: string\n    ) {\n      if (errorString) {\n        const error = JSON.parse(errorString);\n        session.reject(new ArcGISAuthError(error.errorMessage, error.error));\n        return;\n      }\n\n      if (oauthInfoString) {\n        const oauthInfo = JSON.parse(oauthInfoString);\n        session.resolve(\n          new UserSession({\n            clientId,\n            portal,\n            ssl: oauthInfo.ssl,\n            token: oauthInfo.token,\n            tokenExpires: new Date(oauthInfo.expires),\n            username: oauthInfo.username\n          })\n        );\n      }\n    };\n\n    win.open(\n      url,\n      \"oauth-window\",\n      \"height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes\"\n    );\n\n    return session.promise;\n  }\n\n  /**\n   * Completes a browser-based OAuth 2.0 sign if `options.popup` is true the user\n   * will be returned to the previous window. Otherwise a new `UserSession`\n   * will be returned.\n   *\n   * @browserOnly\n   */\n  /* istanbul ignore next */\n  static completeOAuth2(options: IOauth2Options, win: any = window) {\n    const { portal, clientId }: IOauth2Options = {\n      ...{ portal: \"https://www.arcgis.com/sharing/rest\" },\n      ...options\n    };\n\n    function completeSignIn(error: any, oauthInfo?: IFetchTokenResponse) {\n      if (win.opener && win.opener.parent) {\n        win.opener.parent[`__ESRI_REST_AUTH_HANDLER_${clientId}`](\n          error ? JSON.stringify(error) : undefined,\n          JSON.stringify(oauthInfo)\n        );\n        win.close();\n        return undefined;\n      }\n\n      if (win !== win.parent) {\n        win.parent[`__ESRI_REST_AUTH_HANDLER_${clientId}`](\n          error ? JSON.stringify(error) : undefined,\n          JSON.stringify(oauthInfo)\n        );\n        win.close();\n        return undefined;\n      }\n\n      if (error) {\n        throw new ArcGISAuthError(error.errorMessage, error.error);\n      }\n\n      return new UserSession({\n        clientId,\n        portal,\n        ssl: oauthInfo.ssl,\n        token: oauthInfo.token,\n        tokenExpires: oauthInfo.expires,\n        username: oauthInfo.username\n      });\n    }\n\n    const match = win.location.href.match(\n      /access_token=(.+)&expires_in=(.+)&username=([^&]+)/\n    );\n\n    if (!match) {\n      const errorMatch = win.location.href.match(\n        /error=(.+)&error_description=(.+)/\n      );\n\n      const error = errorMatch[1];\n      const errorMessage = decodeURIComponent(errorMatch[2]);\n\n      return completeSignIn({ error, errorMessage });\n    }\n\n    const token = match[1];\n    const expires = new Date(\n      Date.now() + parseInt(match[2], 10) * 1000 - 60 * 1000\n    );\n    const username = decodeURIComponent(match[3]);\n    const ssl =\n      win.location.href.indexOf(\"&ssl=true\") > -1 ||\n      win.location.href.indexOf(\"#ssl=true\") > -1;\n\n    return completeSignIn(undefined, {\n      token,\n      expires,\n      ssl,\n      username\n    });\n  }\n\n  /**\n   * Begins a new server-based OAuth 2.0 sign in. This will redirect the user to\n   * the ArcGIS Online or ArcGIS Enterprise authorization page.\n   *\n   * @nodeOnly\n   */\n  static authorize(options: IOauth2Options, response: http.ServerResponse) {\n    const { portal, clientId, duration, redirectUri }: IOauth2Options = {\n      ...{ portal: \"https://arcgis.com/sharing/rest\", duration: 20160 },\n      ...options\n    };\n\n    response.writeHead(301, {\n      Location: `${portal}/oauth2/authorize?client_id=${clientId}&duration=${duration}&response_type=code&redirect_uri=${encodeURIComponent(\n        redirectUri\n      )}`\n    });\n\n    response.end();\n  }\n\n  /**\n   * Completes the server-based OAuth 2.0 sign in process by exchanging the `authorizationCode`\n   * for a `access_token`.\n   *\n   * @nodeOnly\n   */\n  static exchangeAuthorizationCode(\n    options: IOauth2Options,\n    authorizationCode: string\n  ): Promise<UserSession> {\n    const { portal, clientId, redirectUri, refreshTokenTTL }: IOauth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        refreshTokenTTL: 1440\n      },\n      ...options\n    };\n\n    return fetchToken(`${portal}/oauth2/token`, {\n      grant_type: \"authorization_code\",\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      code: authorizationCode\n    }).then(response => {\n      return new UserSession({\n        clientId,\n        portal,\n        ssl: response.ssl,\n        redirectUri,\n        refreshToken: response.refreshToken,\n        refreshTokenTTL,\n        refreshTokenExpires: new Date(\n          Date.now() + (refreshTokenTTL - 1) * 1000\n        ),\n        token: response.token,\n        tokenExpires: response.expires,\n        username: response.username\n      });\n    });\n  }\n\n  static deserialize(str: string) {\n    const options = JSON.parse(str);\n    return new UserSession({\n      clientId: options.clientId,\n      refreshToken: options.refreshToken,\n      refreshTokenExpires: new Date(options.refreshTokenExpires),\n      username: options.username,\n      password: options.password,\n      token: options.token,\n      tokenExpires: new Date(options.tokenExpires),\n      portal: options.portal,\n      ssl: options.ssl,\n      tokenDuration: options.tokenDuration,\n      redirectUri: options.redirectUri,\n      refreshTokenTTL: options.refreshTokenTTL\n    });\n  }\n\n  /**\n   * Translates authentication from the format used in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n   *\n   * ```js\n   * UserSession.fromCredential({\n   *   userId: \"jsmith\",\n   *   token: \"secret\"\n   * });\n   * ```\n   *\n   * @returns UserSession\n   */\n  static fromCredential(credential: ICredential) {\n    return new UserSession({\n      portal: credential.server + `/sharing/rest`,\n      ssl: credential.ssl,\n      token: credential.token,\n      username: credential.userId,\n      tokenExpires: new Date(credential.expires)\n    });\n  }\n\n  /**\n   * Returns authentication in a format useable in the [ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/).\n   *\n   * ```js\n   * esriId.registerToken(session.toCredential());\n   * ```\n   *\n   * @returns ICredential\n   */\n  toCredential(): ICredential {\n    return {\n      expires: this.tokenExpires.getTime(),\n      server: this.portal,\n      ssl: this.ssl,\n      token: this.token,\n      userId: this.username\n    };\n  }\n\n  /**\n   * Returns information about the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic.\n   *\n   * ```js\n   * session.getUser()\n   *   .then(response => {\n   *     console.log(response.role); // \"org_admin\"\n   *   })\n   * ```\n   *\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  getUser(requestOptions?: IRequestOptions): Promise<IUser> {\n    if (this._user && this._user.username === this.username) {\n      return Promise.resolve(this._user);\n    } else {\n      const url = `${this.portal}/community/users/${encodeURIComponent(\n        this.username\n      )}`;\n\n      const options = {\n        httpMethod: \"GET\",\n        authentication: this,\n        ...requestOptions\n      } as IRequestOptions;\n      return request(url, options).then(response => {\n        this._user = response;\n        return response;\n      });\n    }\n  }\n\n  /**\n   * Gets an appropriate token for the given URL. If `portal` is ArcGIS Online and\n   * the request is to an ArcGIS Online domain `token` will be used. If the request\n   * is to the current `portal` the current `token` will also be used. However if\n   * the request is to an unknown server we will validate the server with a request\n   * to our current `portal`.\n   */\n  getToken(url: string, requestOptions?: ITokenRequestOptions) {\n    if (\n      /^https?:\\/\\/\\S+\\.arcgis\\.com\\/sharing\\/rest/.test(this.portal) &&\n      /^https?:\\/\\/\\S+\\.arcgis\\.com.+/.test(url)\n    ) {\n      return this.getFreshToken(requestOptions);\n    } else if (new RegExp(this.portal).test(url)) {\n      return this.getFreshToken(requestOptions);\n    } else {\n      return this.getTokenForServer(url, requestOptions);\n    }\n  }\n\n  toJSON(): IUserSessionOptions {\n    return {\n      clientId: this.clientId,\n      refreshToken: this.refreshToken,\n      refreshTokenExpires: this.refreshTokenExpires,\n      username: this.username,\n      password: this.password,\n      token: this.token,\n      tokenExpires: this.tokenExpires,\n      portal: this.portal,\n      ssl: this.ssl,\n      tokenDuration: this.tokenDuration,\n      redirectUri: this.redirectUri,\n      refreshTokenTTL: this.refreshTokenTTL\n    };\n  }\n\n  serialize() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Manually refreshes the current `token` and `tokenExpires`.\n   */\n  refreshSession(requestOptions?: ITokenRequestOptions): Promise<UserSession> {\n    if (this.username && this.password) {\n      return this.refreshWithUsernameAndPassword(requestOptions);\n    }\n\n    if (this.clientId && this.refreshToken) {\n      return this.refreshWithRefreshToken();\n    }\n\n    return Promise.reject(new ArcGISAuthError(\"Unable to refresh token.\"));\n  }\n\n  /**\n   * Validates that a given URL is properly federated with our current `portal`.\n   * Attempts to use the internal `trustedServers` cache first.\n   */\n  private getTokenForServer(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ) {\n    // requests to /rest/services/ and /rest/admin/services/ are both valid\n    const [root] = url.split(/\\/rest(\\/admin)?\\/services\\//);\n    const existingToken = this.trustedServers[root];\n\n    if (existingToken && existingToken.expires.getTime() > Date.now()) {\n      return Promise.resolve(existingToken.token);\n    }\n\n    if (this._pendingTokenRequests[root]) {\n      return this._pendingTokenRequests[root];\n    }\n\n    this._pendingTokenRequests[root] = request(`${root}/rest/info`)\n      .then((response: any) => {\n        return response.owningSystemUrl;\n      })\n      .then(owningSystemUrl => {\n        /**\n         * if this server is not owned by this portal or the stand-alone\n         * instance of ArcGIS Server doesn't advertise federation,\n         * bail out with an error since we know we wont\n         * be able to generate a token\n         */\n        if (\n          !owningSystemUrl ||\n          !new RegExp(owningSystemUrl).test(this.portal)\n        ) {\n          throw new ArcGISAuthError(\n            `${url} is not federated with ${this.portal}.`,\n            \"NOT_FEDERATED\"\n          );\n        }\n        return request(`${owningSystemUrl}/sharing/rest/info`, requestOptions);\n      })\n      .then((response: any) => {\n        return response.authInfo.tokenServicesUrl;\n      })\n      .then((tokenServicesUrl: string) => {\n        if (this.token) {\n          return generateToken(tokenServicesUrl, {\n            params: {\n              token: this.token,\n              serverUrl: url,\n              expiration: this.tokenDuration\n            }\n          });\n          // generate an entirely fresh token if necessary\n        } else {\n          return generateToken(tokenServicesUrl, {\n            params: {\n              username: this.username,\n              password: this.password,\n              expiration: this.tokenDuration\n            }\n          }).then((response: any) => {\n            this._token = response.token;\n            this._tokenExpires = new Date(response.expires);\n            return response;\n          });\n        }\n      })\n      .then(response => {\n        this.trustedServers[root] = {\n          expires: new Date(response.expires),\n          token: response.token\n        };\n        return response.token;\n      });\n\n    return this._pendingTokenRequests[root];\n  }\n\n  /**\n   * Returns an unexpired token for the current `portal`.\n   */\n  private getFreshToken(requestOptions?: ITokenRequestOptions) {\n    if (\n      this.token &&\n      this.tokenExpires &&\n      this.tokenExpires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(this.token);\n    }\n\n    if (!this._pendingTokenRequests[this.portal]) {\n      this._pendingTokenRequests[this.portal] = this.refreshSession(\n        requestOptions\n      ).then(session => {\n        this._pendingTokenRequests[this.portal] = null;\n        return session.token;\n      });\n    }\n\n    return this._pendingTokenRequests[this.portal];\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `username` and\n   * `password`.\n   */\n  private refreshWithUsernameAndPassword(\n    requestOptions?: ITokenRequestOptions\n  ) {\n    const options = {\n      params: {\n        username: this.username,\n        password: this.password,\n        expiration: this.tokenDuration\n      },\n      ...requestOptions\n    };\n    return generateToken(`${this.portal}/generateToken`, options).then(\n      (response: any) => {\n        this._token = response.token;\n        this._tokenExpires = new Date(response.expires);\n        return this;\n      }\n    );\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `refreshToken`.\n   */\n  private refreshWithRefreshToken(requestOptions?: ITokenRequestOptions) {\n    if (\n      this.refreshToken &&\n      this.refreshTokenExpires &&\n      this.refreshTokenExpires.getTime() < Date.now()\n    ) {\n      return this.refreshRefreshToken(requestOptions);\n    }\n\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        grant_type: \"refresh_token\"\n      },\n      ...requestOptions\n    };\n    return fetchToken(`${this.portal}/oauth2/token`, options).then(response => {\n      this._token = response.token;\n      this._tokenExpires = response.expires;\n      return this;\n    });\n  }\n\n  /**\n   * Exchanges an expired `refreshToken` for a new one also updates `token` and\n   * `tokenExpires`.\n   */\n  private refreshRefreshToken(requestOptions?: ITokenRequestOptions) {\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        redirect_uri: this.redirectUri,\n        grant_type: \"exchange_refresh_token\"\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token`, options).then(response => {\n      this._token = response.token;\n      this._tokenExpires = response.expires;\n      this._refreshToken = response.refreshToken;\n      this._refreshTokenExpires = new Date(\n        Date.now() + (this.refreshTokenTTL - 1) * 60 * 1000\n      );\n      return this;\n    });\n  }\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nexport * from \"./ApplicationSession\";\nexport * from \"./UserSession\";\nexport * from \"./fetch-token\";\nexport * from \"./generate-token\";\nexport * from \"./authenticated-request-options\";\n"],"names":["request","ArcGISAuthError","tslib_1.__assign"],"mappings":"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"}