import { ISpatialReference, IFeatureSet, IFeature, esriUnits, IExtent } from "@esri/arcgis-rest-common-types";
import { IRequestOptions } from "@esri/arcgis-rest-request";
import { ISharedQueryParams } from "./helpers";
/**
 * Request options to fetch a feature by id.
 */
export interface IFeatureRequestOptions extends IRequestOptions {
    /**
     * Layer service url.
     */
    url: string;
    /**
     * Unique identifier of the feature.
     */
    id: number;
}
export interface IStatisticDefinition {
    /**
     * Statistical operation to perform (count, sum, min, max, avg, stddev, var).
     */
    statisticType: "count" | "sum" | "min" | "max" | "avg" | "stddev" | "var";
    /**
     * Field on which to perform the statistical operation.
     */
    onStatisticField: string;
    /**
     * Field name for the returned statistic field. If outStatisticFieldName is empty or missing, the server will assign one. A valid field name can only contain alphanumeric characters and an underscore. If the outStatisticFieldName is a reserved keyword of the underlying DBMS, the operation can fail. Try specifying an alternative outStatisticFieldName.
     */
    outStatisticFieldName: string;
}
/**
 * feature query request options. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.
 */
export interface IQueryFeaturesRequestOptions extends ISharedQueryParams, IRequestOptions {
    /**
     * Layer service url.
     */
    url: string;
    objectIds?: number[];
    relationParam?: string;
    time?: number | number[];
    distance?: number;
    units?: esriUnits;
    outFields?: "*" | string[];
    returnGeometry?: boolean;
    maxAllowableOffset?: number;
    geometryPrecision?: number;
    outSR?: string | ISpatialReference;
    gdbVersion?: string;
    returnDistinctValues?: boolean;
    returnIdsOnly?: boolean;
    returnCountOnly?: boolean;
    returnExtentOnly?: boolean;
    orderByFields?: string;
    groupByFieldsForStatistics?: string;
    outStatistics?: IStatisticDefinition[];
    returnZ?: boolean;
    returnM?: boolean;
    multipatchOption?: "xyFootprint";
    resultOffset?: number;
    resultRecordCount?: number;
    quantizationParameters?: any;
    returnCentroid?: boolean;
    resultType?: "none" | "standard" | "tile";
    historicMoment?: number;
    returnTrueCurves?: false;
    sqlFormat?: "none" | "standard" | "native";
    returnExceededLimitFeatures?: boolean;
}
export interface IQueryFeaturesResponse extends IFeatureSet {
    exceededTransferLimit?: boolean;
}
export interface IQueryResponse {
    count?: number;
    extent?: IExtent;
    objectIdFieldName?: string;
    objectIds?: number[];
}
/**
 * Get a feature by id.
 *
 * ```js
 * import { getFeature } from '@esri/arcgis-rest-feature-service';
 *
 * const url = "https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Landscape_Trees/FeatureServer/0";
 *
 * getFeature({
 *   url,
 *   id: 42
 * }).then(feature => {
 *  console.log(feature.attributes.FID); // 42
 * });
 * ```
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with the feature.
 */
export declare function getFeature(requestOptions: IFeatureRequestOptions): Promise<IFeature>;
/**
 * Query a feature service. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.
 *
 * ```js
 * import { queryFeatures } from '@esri/arcgis-rest-feature-service';
 *
 * const url = "http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3";
 *
 * queryFeatures({
 *   url,
 *   where: "STATE_NAME = 'Alaska"
 * }).then(result => {
 *   console.log(result.features); // array of features
 * });
 * ```
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that will resolve with the query response.
 */
export declare function queryFeatures(requestOptions: IQueryFeaturesRequestOptions): Promise<IQueryFeaturesResponse | IQueryResponse>;
