{"version":3,"file":"feature-service.umd.js","sources":["../../src/helpers.ts","../../src/query.ts","../../src/add.ts","../../src/update.ts","../../src/delete.ts","../../src/getAttachments.ts","../../src/addAttachment.ts","../../src/updateAttachment.ts","../../src/deleteAttachments.ts","../../src/queryRelated.ts","../../src/index.ts"],"sourcesContent":["/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  esriGeometryType,\n  SpatialRelationship,\n  IGeometry,\n  ISpatialReference\n} from \"@esri/arcgis-rest-common-types\";\nimport { IRequestOptions } from \"@esri/arcgis-rest-request\";\n\nimport { IQueryFeaturesRequestOptions } from \"./query\";\nimport { IAddFeaturesRequestOptions } from \"./add\";\nimport { IUpdateFeaturesRequestOptions } from \"./update\";\nimport { IDeleteFeaturesRequestOptions } from \"./delete\";\nimport { IQueryRelatedRequestOptions } from \"./queryRelated\";\n\nexport interface ISharedQueryParams {\n  where?: string;\n  geometry?: IGeometry;\n  geometryType?: esriGeometryType;\n  // NOTE: either WKID or ISpatialReference\n  inSR?: string | ISpatialReference;\n  spatialRel?: SpatialRelationship;\n}\n\n/**\n * Add, update and delete features result Object.\n */\nexport interface IEditFeatureResult {\n  objectId: number;\n  globalId?: string;\n  success: boolean;\n}\n\n/**\n * Common add and update features parameters.\n */\nexport interface IEditFeaturesParams {\n  /**\n   * The geodatabase version to apply the edits.\n   */\n  gdbVersion?: string;\n  /**\n   * Optional parameter specifying whether the response will report the time features were added.\n   */\n  returnEditMoment?: boolean;\n  /**\n   * Optional parameter to specify if the edits should be applied only if all submitted edits succeed.\n   */\n  rollbackOnFailure?: boolean;\n}\n\n/**\n * Used internally by the package to ensure that first order request options are passed through as request parameters.\n */\nexport function appendCustomParams(\n  oldOptions:\n    | IQueryFeaturesRequestOptions\n    | IAddFeaturesRequestOptions\n    | IUpdateFeaturesRequestOptions\n    | IDeleteFeaturesRequestOptions\n    | IQueryRelatedRequestOptions,\n  newOptions: IRequestOptions\n) {\n  // only pass query parameters through in the request, not generic IRequestOptions props\n  Object.keys(oldOptions).forEach(function(key: string) {\n    if (\n      key !== \"url\" &&\n      key !== \"params\" &&\n      key !== \"authentication\" &&\n      key !== \"httpMethod\" &&\n      key !== \"fetch\" &&\n      key !== \"portal\" &&\n      key !== \"maxUrlLength\"\n    ) {\n      newOptions.params[key] = (oldOptions as { [key: string]: any })[key];\n    }\n  });\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  ISpatialReference,\n  IFeatureSet,\n  IFeature,\n  esriUnits,\n  IExtent\n} from \"@esri/arcgis-rest-common-types\";\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\n\nimport { ISharedQueryParams, appendCustomParams } from \"./helpers\";\n/**\n * Request options to fetch a feature by id.\n */\nexport interface IFeatureRequestOptions extends IRequestOptions {\n  /**\n   * Layer service url.\n   */\n  url: string;\n  /**\n   * Unique identifier of the feature.\n   */\n  id: number;\n}\n\nexport interface IStatisticDefinition {\n  /**\n   * Statistical operation to perform (count, sum, min, max, avg, stddev, var).\n   */\n  statisticType: \"count\" | \"sum\" | \"min\" | \"max\" | \"avg\" | \"stddev\" | \"var\";\n  /**\n   * Field on which to perform the statistical operation.\n   */\n  onStatisticField: string;\n  /**\n   * Field name for the returned statistic field. If outStatisticFieldName is empty or missing, the server will assign one. A valid field name can only contain alphanumeric characters and an underscore. If the outStatisticFieldName is a reserved keyword of the underlying DBMS, the operation can fail. Try specifying an alternative outStatisticFieldName.\n   */\n  outStatisticFieldName: string;\n}\n\n/**\n * feature query request options. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.\n */\nexport interface IQueryFeaturesRequestOptions\n  extends ISharedQueryParams,\n    IRequestOptions {\n  /**\n   * Layer service url.\n   */\n  url: string;\n  objectIds?: number[];\n  relationParam?: string;\n  // NOTE: either time=1199145600000 or time=1199145600000, 1230768000000\n  time?: number | number[];\n  distance?: number;\n  units?: esriUnits;\n  outFields?: \"*\" | string[];\n  returnGeometry?: boolean;\n  maxAllowableOffset?: number;\n  geometryPrecision?: number;\n  // NOTE: either WKID or ISpatialReference\n  outSR?: string | ISpatialReference;\n  gdbVersion?: string;\n  returnDistinctValues?: boolean;\n  returnIdsOnly?: boolean;\n  returnCountOnly?: boolean;\n  returnExtentOnly?: boolean;\n  orderByFields?: string;\n  groupByFieldsForStatistics?: string;\n  outStatistics?: IStatisticDefinition[];\n  returnZ?: boolean;\n  returnM?: boolean;\n  multipatchOption?: \"xyFootprint\";\n  resultOffset?: number;\n  resultRecordCount?: number;\n  // TODO: IQuantizationParameters?\n  quantizationParameters?: any;\n  returnCentroid?: boolean;\n  resultType?: \"none\" | \"standard\" | \"tile\";\n  // to do: convert from Date() to epoch time internally\n  historicMoment?: number;\n  returnTrueCurves?: false;\n  sqlFormat?: \"none\" | \"standard\" | \"native\";\n  returnExceededLimitFeatures?: boolean;\n}\n\nexport interface IQueryFeaturesResponse extends IFeatureSet {\n  exceededTransferLimit?: boolean;\n}\n\nexport interface IQueryResponse {\n  count?: number;\n  extent?: IExtent;\n  objectIdFieldName?: string;\n  objectIds?: number[];\n}\n\n/**\n * Get a feature by id.\n *\n * ```js\n * import { getFeature } from '@esri/arcgis-rest-feature-service';\n *\n * const url = \"https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Landscape_Trees/FeatureServer/0\";\n *\n * getFeature({\n *   url,\n *   id: 42\n * }).then(feature => {\n *  console.log(feature.attributes.FID); // 42\n * });\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the feature.\n */\nexport function getFeature(\n  requestOptions: IFeatureRequestOptions\n): Promise<IFeature> {\n  const url = `${requestOptions.url}/${requestOptions.id}`;\n\n  // default to a GET request\n  const options: IFeatureRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n  return request(url, options).then((response: any) => response.feature);\n}\n\n/**\n * Query a feature service. See [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm) for more information.\n *\n * ```js\n * import { queryFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * const url = \"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Census/MapServer/3\";\n *\n * queryFeatures({\n *   url,\n *   where: \"STATE_NAME = 'Alaska\"\n * }).then(result => {\n *   console.log(result.features); // array of features\n * });\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the query response.\n */\nexport function queryFeatures(\n  requestOptions: IQueryFeaturesRequestOptions\n): Promise<IQueryFeaturesResponse | IQueryResponse> {\n  // default to a GET request\n  const options: IQueryFeaturesRequestOptions = {\n    params: {},\n    httpMethod: \"GET\",\n    url: requestOptions.url,\n    ...requestOptions\n  };\n\n  appendCustomParams(requestOptions, options);\n\n  // set default query parameters\n  if (!options.params.where) {\n    options.params.where = \"1=1\";\n  }\n  if (!options.params.outFields) {\n    options.params.outFields = \"*\";\n  }\n  return request(`${options.url}/query`, options);\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IFeature } from \"@esri/arcgis-rest-common-types\";\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\n\nimport {\n  IEditFeaturesParams,\n  IEditFeatureResult,\n  appendCustomParams\n} from \"./helpers\";\n\n/**\n * Add features request options. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/add-features.htm) for more information.\n *\n * @param url - Feature service url.\n * @param adds - Array of JSON features to add.\n * @param params - Query parameters to be sent to the feature service via the request.\n */\nexport interface IAddFeaturesRequestOptions\n  extends IEditFeaturesParams,\n    IRequestOptions {\n  /**\n   * Feature service url.\n   */\n  url: string;\n  /**\n   * Array of JSON features to add.\n   */\n  adds: IFeature[];\n}\n\n/**\n * Add features results.\n */\nexport interface IAddFeaturesResult {\n  /**\n   * Array of JSON response Object(s) for each feature added.\n   */\n  addResults?: IEditFeatureResult[];\n}\n\n/**\n * Add features request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/add-features.htm) for more information.\n *\n * ```js\n * import { addFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * const url = \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\";\n *\n * addFeatures({\n *   url,\n *   adds: [{\n *     geometry: { x: -120, y: 45, spatialReference: { wkid: 4326 } },\n *     attributes: { status: \"alive\" }\n *   }]\n * });\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the addFeatures response.\n */\nexport function addFeatures(\n  requestOptions: IAddFeaturesRequestOptions\n): Promise<IAddFeaturesResult> {\n  const url = `${requestOptions.url}/addFeatures`;\n\n  // edit operations are POST only\n  const options: IAddFeaturesRequestOptions = {\n    params: {},\n    ...requestOptions\n  };\n\n  appendCustomParams(requestOptions, options);\n\n  // mixin, don't overwrite\n  options.params.features = requestOptions.adds;\n  delete options.params.adds;\n\n  return request(url, options);\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IFeature } from \"@esri/arcgis-rest-common-types\";\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\n\nimport {\n  IEditFeaturesParams,\n  IEditFeatureResult,\n  appendCustomParams\n} from \"./helpers\";\n\n/**\n * Update features request options. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/update-features.htm) for more information.\n *\n * @param url - Feature service url.\n * @param updates - Array of JSON features to update.\n * @param params - Query parameters to be sent to the feature service via the request.\n */\nexport interface IUpdateFeaturesRequestOptions\n  extends IEditFeaturesParams,\n    IRequestOptions {\n  /**\n   * Feature service url.\n   */\n  url: string;\n  /**\n   * Array of JSON features to update.\n   */\n  updates: IFeature[];\n}\n\n/**\n * Update features results.\n */\nexport interface IUpdateFeaturesResult {\n  /**\n   * Array of JSON response Object(s) for each feature updated.\n   */\n  updateResults?: IEditFeatureResult[];\n}\n\n/**\n * Update features request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/update-features.htm) for more information.\n *\n * ```js\n * import { updateFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * const url = \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\";\n *\n * updateFeatures({\n *   url,\n *   updates: [{\n *     geometry: { x: -120, y: 45, spatialReference: { wkid: 4326 } },\n *     attributes: { status: \"alive\" }\n *   }]\n * });\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the updateFeatures response.\n */\nexport function updateFeatures(\n  requestOptions: IUpdateFeaturesRequestOptions\n): Promise<IUpdateFeaturesResult> {\n  const url = `${requestOptions.url}/updateFeatures`;\n\n  // edit operations are POST only\n  const options: IUpdateFeaturesRequestOptions = {\n    params: {},\n    ...requestOptions\n  };\n\n  appendCustomParams(requestOptions, options);\n\n  // mixin, don't overwrite\n  options.params.features = requestOptions.updates;\n  delete options.params.updates;\n\n  return request(url, options);\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\n\nimport {\n  IEditFeaturesParams,\n  IEditFeatureResult,\n  ISharedQueryParams,\n  appendCustomParams\n} from \"./helpers\";\n\n/**\n * Delete features parameters.\n */\nexport interface IDeleteFeaturesParams\n  extends IEditFeaturesParams,\n    ISharedQueryParams {}\n\n/**\n * Delete features request options. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/delete-features.htm) for more information.\n *\n * @param url - Feature service url.\n * @param deletes - Array of objectIds to delete.\n * @param params - Query parameters to be sent to the feature service via the request.\n */\nexport interface IDeleteFeaturesRequestOptions\n  extends IDeleteFeaturesParams,\n    IRequestOptions {\n  /**\n   * Feature service url.\n   */\n  url: string;\n  /**\n   * Array of objectIds to delete.\n   */\n  deletes: number[];\n}\n\n/**\n * Delete features results.\n */\nexport interface IDeleteFeaturesResult {\n  /**\n   * Array of JSON response Object(s) for each feature deleted.\n   */\n  deleteResults?: IEditFeatureResult[];\n}\n\n/**\n * Delete features request. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/delete-features.htm) for more information.\n *\n * ```js\n * import { deleteFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * const url = \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\";\n *\n * deleteFeatures({\n *   url,\n *   deletes: [1,2,3]\n * });\n * ```\n *\n * @param deleteFeaturesRequestOptions - Options for the request.\n * @returns A Promise that will resolve with the deleteFeatures response.\n */\nexport function deleteFeatures(\n  requestOptions: IDeleteFeaturesRequestOptions\n): Promise<IDeleteFeaturesResult> {\n  const url = `${requestOptions.url}/deleteFeatures`;\n\n  // edit operations POST only\n  const options: IDeleteFeaturesRequestOptions = {\n    params: {},\n    ...requestOptions\n  };\n\n  appendCustomParams(requestOptions, options);\n\n  // mixin, don't overwrite\n  options.params.objectIds = requestOptions.deletes;\n  delete options.params.deletes;\n\n  return request(url, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\n\n/**\n * Request options to fetch `attachmentInfos` of a feature by id. See [Attachment Infos](https://developers.arcgis.com/rest/services-reference/attachment-infos-feature-service-.htm) for more information.\n *\n */\nexport interface IGetAttachmentsOptions extends IRequestOptions {\n  /**\n   * Feature service url.\n   */\n  url: string;\n  /**\n   * Unique identifier of feature to request related `attachmentInfos`.\n   */\n  featureId: number;\n}\n\n/**\n * Attachment, a.k.a. `attachmentInfo`. See [Attachment](https://developers.arcgis.com/rest/services-reference/attachment-feature-service-.htm) for more information.\n */\nexport interface IAttachmentInfo {\n  id: number;\n  contentType: string;\n  size: number;\n  name: string;\n}\n\n/**\n * `getAttachments()` request response.\n */\nexport interface IGetAttachmentsResponse {\n  /**\n   * Array of `attachmentInfo` Object(s) for each related attachment. Empty Array means no attachments.\n   */\n  attachmentInfos: IAttachmentInfo[];\n}\n\n/**\n * Request `attachmentInfos` of a feature by id. See [Attachment Infos](https://developers.arcgis.com/rest/services-reference/attachment-infos-feature-service-.htm) for more information.\n *\n * ```js\n * import { getAttachments } from '@esri/arcgis-rest-feature-service';\n *\n * getAttachments({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   featureId: 8484\n * });\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the `getAttachments()` response.\n */\nexport function getAttachments(\n  requestOptions: IGetAttachmentsOptions\n): Promise<IGetAttachmentsResponse> {\n  // pass through\n  return request(\n    `${requestOptions.url}/${requestOptions.featureId}/attachments`,\n    requestOptions\n  );\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\n\nimport { IEditFeatureResult } from \"./helpers\";\n\n/**\n * Request options for adding a related attachment to a feature by id. See [Add Attachment](https://developers.arcgis.com/rest/services-reference/add-attachment.htm) for more information.\n *\n */\nexport interface IAddAttachmentOptions extends IRequestOptions {\n  /**\n   * Feature service url.\n   */\n  url: string;\n  /**\n   * Unique identifier of feature to add related attachment.\n   */\n  featureId: number;\n  /**\n   * File to be attached.\n   */\n  attachment: File;\n}\n\n/**\n * `addAttachment()` request response.\n */\nexport interface IAddAttachmentResponse {\n  /**\n   * Standard AGS add/update/edit result Object for the attachment.\n   */\n  addAttachmentResult: IEditFeatureResult;\n}\n\n/**\n * Attach a file to a feature by id. See [Add Attachment](https://developers.arcgis.com/rest/services-reference/add-attachment.htm) for more information.\n *\n * ```js\n * import { addAttachment } from '@esri/arcgis-rest-feature-service';\n *\n * addAttachment({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   featureId: 8484,\n *   attachment: myFileInput.files[0]\n * });\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the `addAttachment()` response.\n */\nexport function addAttachment(\n  requestOptions: IAddAttachmentOptions\n): Promise<IAddAttachmentResponse> {\n  const options: IAddAttachmentOptions = {\n    params: {},\n    ...requestOptions\n  };\n\n  // `attachment` --> params: {}\n  options.params.attachment = requestOptions.attachment;\n\n  return request(`${options.url}/${options.featureId}/addAttachment`, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\n\nimport { IEditFeatureResult } from \"./helpers\";\n\n/**\n * Request options to for updating a related attachment to a feature by id. See [Update Attachment](https://developers.arcgis.com/rest/services-reference/update-attachment.htm) for more information.\n *\n */\nexport interface IUpdateAttachmentOptions extends IRequestOptions {\n  /**\n   * Feature service url.\n   */\n  url: string;\n  /**\n   * Unique identifier of feature to update related attachment.\n   */\n  featureId: number;\n  /**\n   * File to be updated.\n   */\n  attachment: File;\n  /**\n   * Unique identifier of the attachment.\n   */\n  attachmentId: number;\n}\n\n/**\n * `updateAttachment()` request response.\n */\nexport interface IUpdateAttachmentResponse {\n  /**\n   * Standard AGS add/update/edit result Object for the attachment.\n   */\n  updateAttachmentResult: IEditFeatureResult;\n}\n\n/**\n * Update a related attachment to a feature by id. See [Update Attachment](https://developers.arcgis.com/rest/services-reference/update-attachment.htm) for more information.\n *\n * ```js\n * import { updateAttachment } from '@esri/arcgis-rest-feature-service';\n *\n * updateAttachment({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   featureId: 8484,\n *   attachment: myFileInput.files[0],\n *   attachmentId: 306\n * });\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the `updateAttachment()` response.\n */\nexport function updateAttachment(\n  requestOptions: IUpdateAttachmentOptions\n): Promise<IUpdateAttachmentResponse> {\n  const options: IUpdateAttachmentOptions = {\n    params: {},\n    ...requestOptions\n  };\n\n  // `attachment` and `attachmentId` --> params: {}\n  options.params.attachment = requestOptions.attachment;\n  options.params.attachmentId = requestOptions.attachmentId;\n\n  return request(\n    `${options.url}/${options.featureId}/updateAttachment`,\n    options\n  );\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\n\nimport { IEditFeatureResult } from \"./helpers\";\n\n/**\n * Request options to for deleting related attachments of a feature by id. See [Delete Attachments](https://developers.arcgis.com/rest/services-reference/delete-attachments.htm) for more information.\n *\n */\nexport interface IDeleteAttachmentsOptions extends IRequestOptions {\n  /**\n   * Feature service url.\n   */\n  url: string;\n  /**\n   * Unique identifier of feature to delete related attachment(s).\n   */\n  featureId: number;\n  /**\n   * Array of unique identifiers of attachments to delete.\n   */\n  attachmentIds: number[];\n}\n\n/**\n * `updateAttachment()` request response.\n */\nexport interface IDeleteAttachmentsResponse {\n  /**\n   * Array of standard AGS add/update/edit result Object(s) for the attachment(s).\n   */\n  deleteAttachmentResults: IEditFeatureResult[];\n}\n\n/**\n * Delete existing attachment files of a feature by id. See [Delete Attachments](https://developers.arcgis.com/rest/services-reference/delete-attachments.htm) for more information.\n *\n * ```js\n * import { deleteAttachments } from '@esri/arcgis-rest-feature-service';\n *\n * deleteAttachments({\n *   url: \"https://sampleserver6.arcgisonline.com/arcgis/rest/services/ServiceRequest/FeatureServer/0\",\n *   featureId: 8484,\n *   attachmentIds: [306]\n * });\n * ```\n *\n * @param requestOptions - Options for the request.\n * @returns A Promise that will resolve with the `deleteAttachments()` response.\n */\nexport function deleteAttachments(\n  requestOptions: IDeleteAttachmentsOptions\n): Promise<IDeleteAttachmentsResponse> {\n  const options: IDeleteAttachmentsOptions = {\n    params: {},\n    ...requestOptions\n  };\n\n  // `attachmentIds` --> params: {}\n  options.params.attachmentIds = requestOptions.attachmentIds;\n\n  return request(\n    `${options.url}/${options.featureId}/deleteAttachments`,\n    options\n  );\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  ISpatialReference,\n  IFeature,\n  IHasZM,\n  esriGeometryType,\n  IField\n} from \"@esri/arcgis-rest-common-types\";\nimport { request, IRequestOptions } from \"@esri/arcgis-rest-request\";\nimport { appendCustomParams } from \"./helpers\";\n\n/**\n * Related record query request options. Additional arguments can be passed via the [params](/arcgis-rest-js/api/feature-service/IQueryRelatedRequestOptions/#params) property. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-related-feature-service-.htm) for more information and a full list of parameters.\n */\nexport interface IQueryRelatedRequestOptions extends IRequestOptions {\n  url: string;\n  relationshipId?: number;\n  objectIds?: number[];\n  outFields?: \"*\" | string[];\n  definitionExpression?: string;\n}\n\n/**\n * Related record data structure\n */\n\nexport interface IRelatedRecordGroup {\n  objectId: number;\n  relatedRecords?: IFeature[];\n  count?: number;\n}\n\n/**\n * Related record response structure\n */\n\nexport interface IQueryRelatedResponse extends IHasZM {\n  geometryType?: esriGeometryType;\n  spatialReference?: ISpatialReference;\n  fields?: IField[];\n  relatedRecordGroups: IRelatedRecordGroup[];\n}\n/**\n * Query the related records for a feature service. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/query-related-records-feature-service-.htm) for more information.\n *\n * ```js\n * import { queryRelated } from '@esri/arcgis-rest-feature-service'\n *\n * const url = \"http://services.myserver/OrgID/ArcGIS/rest/services/Petroleum/KSPetro/FeatureServer/0\"\n *\n * queryRelated({\n *  url: url,\n *  relationshipId: 1,\n *  params: { returnCountOnly: true }\n * })\n *  .then(response => {\n *    console.log(response.relatedRecords)\n *  })\n * ```\n *\n * @param requestOptions\n * @returns A Promise that will resolve with the query response\n */\nexport function queryRelated(\n  requestOptions: IQueryRelatedRequestOptions\n): Promise<IQueryRelatedResponse> {\n  const options: IQueryRelatedRequestOptions = {\n    params: {},\n    httpMethod: \"GET\",\n    url: requestOptions.url,\n    ...requestOptions\n  };\n\n  appendCustomParams(requestOptions, options);\n\n  if (!options.params.definitionExpression) {\n    options.params.definitionExpression = \"1=1\";\n  }\n\n  if (!options.params.outFields) {\n    options.params.outFields = \"*\";\n  }\n\n  if (!options.params.relationshipId) {\n    options.params.relationshipId = 0;\n  }\n\n  return request(`${options.url}/queryRelatedRecords`, options);\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nexport * from \"./query\";\nexport * from \"./add\";\nexport * from \"./update\";\nexport * from \"./delete\";\nexport * from \"./getAttachments\";\nexport * from \"./addAttachment\";\nexport * from \"./updateAttachment\";\nexport * from \"./deleteAttachments\";\nexport * from \"./queryRelated\";\n"],"names":["request"],"mappings":"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"}