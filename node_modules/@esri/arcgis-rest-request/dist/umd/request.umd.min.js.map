{"version":3,"file":"request.umd.min.js","sources":["../../src/utils/ArcGISRequestError.ts","../../src/utils/ErrorTypes.ts","../../src/utils/ArcGISAuthError.ts","../../src/utils/check-for-errors.ts","../../src/utils/process-params.ts","../../src/utils/encode-query-string.ts","../../src/utils/encode-form-data.ts","../../src/request.ts","../../src/utils/get-portal-url.ts","../../src/utils/get-portal.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"../request\";\n\n// TypeScript 2.1 no longer allows you to extend built in types. See https://github.com/Microsoft/TypeScript/issues/12790#issuecomment-265981442\n// and https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n//\n// This code is from MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types.\nexport class ArcGISRequestError {\n  /**\n   * The name of this error. Will always be `\"ArcGISRequestError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  message: string;\n\n  /**\n   * The errror message return from the request.\n   */\n  originalMessage: string;\n\n  /**\n   * The error code returned from the request.\n   */\n  code: string | number;\n\n  /**\n   * The original JSON response the caused the error.\n   */\n  response: any;\n\n  /**\n   * The URL of the original request that caused the error\n   */\n  url: string;\n\n  /**\n   * The options of the original request that caused the error\n   */\n  options: IRequestOptions;\n\n  /**\n   * Create a new `ArcGISRequestError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options and parameters of the request\n   */\n  constructor(\n    message?: string,\n    code?: string | number,\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    message = message || \"UNKNOWN_ERROR\";\n    code = code || \"UNKNOWN_ERROR_CODE\";\n\n    this.name = \"ArcGISRequestError\";\n    this.message =\n      code === \"UNKNOWN_ERROR_CODE\" ? message : `${code}: ${message}`;\n    this.originalMessage = message;\n    this.code = code;\n    this.response = response;\n    this.url = url;\n    this.options = options;\n  }\n}\nArcGISRequestError.prototype = Object.create(Error.prototype);\nArcGISRequestError.prototype.constructor = ArcGISRequestError;\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Enum describing the different errors that might be thrown by a request.\n *\n * ```ts\n * import { request, ErrorTypes } from '@esri/arcgis-rest-request';\n *\n * request(\"...\").catch((e) => {\n *   switch(e.name) {\n *     case ErrorType.ArcGISRequestError:\n *     // handle a general error from the API\n *     break;\n *\n *     case ErrorType.ArcGISAuthError:\n *     // handle an authentication error\n *     break;\n *\n *     default:\n *     // handle some other error (usually a network error)\n *   }\n * });\n * ```\n */\nexport enum ErrorTypes {\n  ArcGISRequestError = \"ArcGISRequestError\",\n  ArcGISAuthError = \"ArcGISAuthError\"\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions, IAuthenticationManager } from \"../request\";\nimport { ArcGISRequestError } from \"./ArcGISRequestError\";\n\nexport type IRetryAuthError = (\n  url: string,\n  options: IRequestOptions\n) => Promise<IAuthenticationManager>;\n\nexport class ArcGISAuthError extends ArcGISRequestError {\n  /**\n   * Create a new `ArcGISAuthError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options of the request\n   */\n  constructor(\n    message = \"AUTHENTICATION_ERROR\",\n    code: string | number = \"AUTHENTICATION_ERROR_CODE\",\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    super(message, code, response, url, options);\n    this.name = \"ArcGISAuthError\";\n    this.message =\n      code === \"AUTHENTICATION_ERROR_CODE\" ? message : `${code}: ${message}`;\n  }\n\n  retry(getSession: IRetryAuthError, retryLimit = 3) {\n    let tries = 0;\n\n    const retryRequest = (resolve: any, reject: any) => {\n      getSession(this.url, this.options)\n        .then(session => {\n          const newOptions = {\n            ...this.options,\n            ...{ authentication: session }\n          };\n\n          tries = tries + 1;\n          return request(this.url, newOptions);\n        })\n        .then(response => {\n          resolve(response);\n        })\n        .catch(e => {\n          if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n            retryRequest(resolve, reject);\n          } else if (e.name === \"ArcGISAuthError\" && tries >= retryLimit) {\n            reject(this);\n          } else {\n            reject(e);\n          }\n        });\n    };\n\n    return new Promise((resolve, reject) => {\n      retryRequest(resolve, reject);\n    });\n  }\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { ArcGISRequestError } from \"./ArcGISRequestError\";\nimport { ArcGISAuthError } from \"./ArcGISAuthError\";\nimport { IRequestOptions, IParams } from \"../request\";\n/**\n * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n *\n * @param data The response JSON to check for errors.\n * @param url The url of the original request\n * @param params The parameters of the original request\n * @param options The options of the original request\n * @returns The data that was passed in the `data` parameter\n */\nexport function checkForErrors(\n  response: any,\n  url?: string,\n  params?: IParams,\n  options?: IRequestOptions\n): any {\n  // this is an error message from billing.arcgis.com backend\n  if (response.code >= 400) {\n    const { message, code } = response;\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  // error from ArcGIS Online or an ArcGIS Portal or server instance.\n  if (response.error) {\n    const { message, code, messageCode } = response.error;\n    const errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n\n    if (code === 498 || code === 499 || messageCode === \"GWM_0003\") {\n      throw new ArcGISAuthError(message, errorCode, response, url, options);\n    }\n\n    throw new ArcGISRequestError(message, errorCode, response, url, options);\n  }\n\n  // error from a status check\n  if (response.status === \"failed\" || response.status === \"failure\") {\n    let message: string;\n    let code: string = \"UNKNOWN_ERROR_CODE\";\n\n    try {\n      message = JSON.parse(response.statusMessage).message;\n      code = JSON.parse(response.statusMessage).code;\n    } catch (e) {\n      message = response.statusMessage || response.message;\n    }\n\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  return response;\n}\n\n/**\n * Method used internally to surface messages to developers.\n */\nexport function warn(message: string) {\n  if (console && console.warn) {\n    console.warn.apply(console, [message]);\n  }\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n* Apache-2.0 */\n\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nexport function requiresFormData(params: any) {\n  return Object.keys(params).some(key => {\n    const value = params[key];\n\n    if (!value) {\n      return false;\n    }\n\n    const type = value.constructor.name;\n\n    switch (type) {\n      case \"Array\":\n        return false;\n      case \"Object\":\n        return false;\n      case \"Date\":\n        return false;\n      case \"Function\":\n        return false;\n      case \"Boolean\":\n        return false;\n      case \"String\":\n        return false;\n      case \"Number\":\n        return false;\n      default:\n        return true;\n    }\n  });\n}\n\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nexport function processParams(params: any): any {\n  const newParams: any = {};\n\n  Object.keys(params).forEach(key => {\n    const param = params[key];\n    if (\n      !param &&\n      param !== 0 &&\n      typeof param !== \"boolean\" &&\n      typeof param !== \"string\"\n    ) {\n      return;\n    }\n    const type = param.constructor.name;\n\n    let value: any;\n\n    // properly encodes objects, arrays and dates for arcgis.com and other services.\n    // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n    // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n    // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n    switch (type) {\n      case \"Array\":\n        // Based on the first element of the array, classify array as an array of objects to be stringified\n        // or an array of non-objects to be comma-separated\n        value =\n          param[0] &&\n          param[0].constructor &&\n          param[0].constructor.name === \"Object\"\n            ? JSON.stringify(param)\n            : param.join(\",\");\n        break;\n      case \"Object\":\n        value = JSON.stringify(param);\n        break;\n      case \"Date\":\n        value = param.valueOf();\n        break;\n      case \"Function\":\n        value = null;\n        break;\n      case \"Boolean\":\n        value = param + \"\";\n        break;\n      default:\n        value = param;\n        break;\n    }\n    if (value || value === 0 || typeof value === \"string\") {\n      newParams[key] = value;\n    }\n  });\n\n  return newParams;\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams } from \"./process-params\";\n\nexport function encodeParam(key: string, value: any) {\n  return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nexport function encodeQueryString(params: any): string {\n  const newParams = processParams(params);\n  return Object.keys(newParams)\n    .map((key: any) => {\n      return encodeParam(key, newParams[key]);\n    })\n    .join(\"&\");\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams, requiresFormData } from \"./process-params\";\nimport { encodeQueryString } from \"./encode-query-string\";\n/**\n * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n *\n * @param params An object to be encoded.\n * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n */\nexport function encodeFormData(params: any): FormData | string {\n  const useFormData = requiresFormData(params);\n  const newParams = processParams(params);\n  if (useFormData) {\n    const formData = new FormData();\n    Object.keys(newParams).forEach((key: any) => {\n      if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n        /* To name the Blob:\n         1. look to an alternate request parameter called 'fileName'\n         2. see if 'name' has been tacked onto the Blob manually\n         3. if all else fails, use the request parameter\n        */\n        const filename = newParams[\"fileName\"] || newParams[key].name || key;\n        formData.append(key, newParams[key], filename);\n      } else {\n        formData.append(key, newParams[key]);\n      }\n    });\n    return formData;\n  } else {\n    return encodeQueryString(params);\n  }\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { checkForErrors } from \"./utils/check-for-errors\";\nimport { encodeFormData } from \"./utils/encode-form-data\";\nimport { encodeQueryString } from \"./utils/encode-query-string\";\nimport { requiresFormData } from \"./utils/process-params\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError\";\n\nexport type GrantTypes =\n  | \"authorization_code\"\n  | \"refresh_token\"\n  | \"client_credentials\"\n  | \"exchange_refresh_token\";\n\nexport interface IParams {\n  f?: ResponseFormats;\n  [key: string]: any;\n}\n\nexport interface IGenerateTokenParams extends IParams {\n  username?: string;\n  password?: string;\n  expiration?: number;\n  token?: string;\n  serverUrl?: string;\n}\n\nexport interface IFetchTokenParams extends IParams {\n  client_id: string;\n  client_secret?: string;\n  grant_type: GrantTypes;\n  redirect_uri?: string;\n  refresh_token?: string;\n  code?: string;\n}\n\nexport interface ITokenRequestOptions {\n  params?: IGenerateTokenParams | IFetchTokenParams;\n  httpMethod?: HTTPMethods;\n  fetch?: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\n}\n\n/**\n * Authentication can be supplied to `request` via [`UserSession`](../../auth/UserSession/) or [`ApplicationSession`](../../auth/ApplicationSession/). Both classes extend `IAuthenticationManager`.\n * ```js\n * const session = new UserSession({\n *   username: \"jsmith\",\n *   password: \"123456\",\n *   // optional\n *   portal: \"https://[yourserver]/arcgis/sharing/rest\"\n * })\n *\n * request(url, { authentication: session })\n * ```\n */\nexport interface IAuthenticationManager {\n  /**\n   * Defaults to 'https://www.arcgis.com/sharing/rest'.\n   */\n  portal: string;\n  getToken(url: string, requestOptions?: ITokenRequestOptions): Promise<string>;\n}\n\n/**\n * HTTP methods used by the ArcGIS REST API.\n */\nexport type HTTPMethods = \"GET\" | \"POST\";\n\n/**\n * Valid response formats for the `f` parameter.\n */\nexport type ResponseFormats =\n  | \"json\"\n  | \"geojson\"\n  | \"text\"\n  | \"html\"\n  | \"image\"\n  | \"zip\";\n\n/**\n * Options for the `request()` method.\n */\nexport interface IRequestOptions {\n  /**\n   * Additional parameters to pass in the request.\n   */\n  params?: IParams;\n\n  /**\n   * The HTTP method to send the request with.\n   */\n  httpMethod?: HTTPMethods;\n\n  /**\n   * The instance of `IAuthenticationManager` to use to authenticate this request.\n   */\n  authentication?: IAuthenticationManager;\n\n  /**\n   * Base url for the portal you want to make the request to. Defaults to 'https://www.arcgis.com/sharing/rest'.\n   */\n  portal?: string;\n\n  /**\n   * The implementation of `fetch` to use. Defaults to a global `fetch`.\n   */\n  fetch?: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\n\n  /**\n   * If the length of a GET request's URL exceeds `maxUrlLength` the request will use POST instead.\n   */\n  maxUrlLength?: number;\n}\n\n/**\n * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n *\n * ```js\n * import { request } from '@esri/arcgis-rest-request';\n *\n * request('https://www.arcgis.com/sharing/rest')\n *   .then((response) => {\n *     console.log(response.currentVersion); // => 5.2\n *   });\n * ```\n *\n * ```js\n * import { request, HTTPMethods } from '@esri/arcgis-rest-request';\n *\n * request('https://www.arcgis.com/sharing/rest', {\n *   httpMethod: \"GET\"\n * }).then((response) => {\n *   console.log(response.currentVersion); // => 5.2\n * });\n * ```\n *\n * ```js\n * import { request, HTTPMethods } from '@esri/arcgis-rest-request';\n *\n * request('https://www.arcgis.com/sharing/rest/search', {\n *   params: { q: 'parks' }\n * }).then((response) => {\n *   console.log(response.total); // => 78379\n * });\n * ```\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function request(\n  url: string,\n  requestOptions: IRequestOptions = { params: { f: \"json\" } }\n): Promise<any> {\n  const options: IRequestOptions = {\n    httpMethod: \"POST\",\n    ...requestOptions\n  };\n\n  const missingGlobals: string[] = [];\n  const recommendedPackages: string[] = [];\n\n  // don't check for a global fetch if a custom implementation was passed through\n  if (!options.fetch && typeof fetch !== \"undefined\") {\n    options.fetch = fetch.bind(Function(\"return this\")());\n  } else {\n    missingGlobals.push(\"`fetch`\");\n    recommendedPackages.push(\"`isomorphic-fetch`\");\n  }\n\n  if (typeof Promise === \"undefined\") {\n    missingGlobals.push(\"`Promise`\");\n    recommendedPackages.push(\"`es6-promise`\");\n  }\n\n  if (typeof FormData === \"undefined\") {\n    missingGlobals.push(\"`FormData`\");\n    recommendedPackages.push(\"`isomorphic-form-data`\");\n  }\n\n  if (\n    !options.fetch ||\n    typeof Promise === \"undefined\" ||\n    typeof FormData === \"undefined\"\n  ) {\n    throw new Error(\n      `\\`arcgis-rest-request\\` requires global variables for \\`fetch\\`, \\`Promise\\` and \\`FormData\\` to be present in the global scope. You are missing ${missingGlobals.join(\n        \", \"\n      )}. We recommend installing the ${recommendedPackages.join(\n        \", \"\n      )} modules at the root of your application to add these to the global scope. See https://bit.ly/2KNwWaJ for more info.`\n    );\n  }\n\n  const { httpMethod, authentication } = options;\n\n  const params: IParams = {\n    ...{ f: \"json\" },\n    ...requestOptions.params\n  };\n\n  const fetchOptions: RequestInit = {\n    method: httpMethod,\n    // ensures behavior mimics XMLHttpRequest. needed to support sending IWA cookies\n    credentials: \"same-origin\"\n  };\n\n  return (authentication\n    ? authentication.getToken(url, {\n        fetch: options.fetch\n      })\n    : Promise.resolve(\"\")\n  )\n    .then(token => {\n      if (token.length) {\n        params.token = token;\n      }\n\n      if (fetchOptions.method === \"GET\") {\n        // encode the parameters into the query string\n        const queryParams = encodeQueryString(params);\n        // dont append a '?' unless parameters are actually present\n        const urlWithQueryString =\n          queryParams === \"\" ? url : url + \"?\" + encodeQueryString(params);\n\n        if (\n          options.maxUrlLength &&\n          urlWithQueryString.length > options.maxUrlLength\n        ) {\n          // the consumer specified a maximum length for URLs\n          // and this would exceed it, so use post instead\n          fetchOptions.method = \"POST\";\n        } else {\n          // just use GET\n          url = urlWithQueryString;\n        }\n      }\n\n      if (fetchOptions.method === \"POST\") {\n        fetchOptions.body = encodeFormData(params);\n      }\n\n      /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n      if (!requiresFormData(params)) {\n        fetchOptions.headers = {};\n        fetchOptions.headers[\"Content-Type\"] =\n          \"application/x-www-form-urlencoded\";\n      }\n\n      return options.fetch(url, fetchOptions);\n    })\n    .then(response => {\n      if (!response.ok) {\n        // server responded w/ an actual error (404, 500, etc)\n        const { status, statusText } = response;\n        throw new ArcGISRequestError(\n          statusText,\n          `HTTP ${status}`,\n          response,\n          url,\n          options\n        );\n      }\n      switch (params.f) {\n        case \"json\":\n          return response.json();\n        case \"geojson\":\n          return response.json();\n        case \"html\":\n          return response.text();\n        case \"text\":\n          return response.text();\n        /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n        case \"image\":\n          return response.blob();\n        /* istanbul ignore next */\n        case \"zip\":\n          return response.blob();\n        /* istanbul ignore next */\n        default:\n          // hopefully we never need to handle JSON payloads when no f= parameter is set\n          return response.blob();\n      }\n    })\n    .then(data => {\n      if (params.f === \"json\" || params.f === \"geojson\") {\n        return checkForErrors(data, url, params, options);\n      } else {\n        return data;\n      }\n    });\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { IRequestOptions } from \"../request\";\n\n/**\n * Helper that returns the appropriate portal url for a given request. `requestOptions.portal` is given\n * precedence over `authentication.portal`. If neither are present, `www.arcgis.com/sharing/rest` is returned.\n *\n * @param requestOptions - Request options that may have authentication manager\n * @returns Portal url to be used in API requests\n */\nexport function getPortalUrl(requestOptions: IRequestOptions = {}): string {\n  // use portal in options if specified\n  if (requestOptions.portal) {\n    return requestOptions.portal;\n  }\n\n  // if auth was passed, use that portal\n  if (requestOptions.authentication) {\n    return requestOptions.authentication.portal;\n  }\n\n  // default to arcgis.com\n  return \"https://www.arcgis.com/sharing/rest\";\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, IRequestOptions } from \"../request\";\n\nimport { getPortalUrl } from \"./get-portal-url\";\n\nexport interface IPortal {\n  id: string;\n  isPortal: boolean;\n  name: string;\n  [key: string]: any;\n}\n\n/**\n * Get the portal\n * @param requestOptions\n */\nexport function getSelf(requestOptions?: IRequestOptions): Promise<IPortal> {\n  // just delegate to getPortal w/o an id\n  return getPortal(null, requestOptions);\n}\n\n/**\n * Get a portal by id. If no id is passed, it will call portals/self\n * @param id\n * @param requestOptions\n */\nexport function getPortal(\n  id?: string,\n  requestOptions?: IRequestOptions\n): Promise<IPortal> {\n  // construct the search url\n  const idOrSelf = id ? id : \"self\";\n  const url = `${getPortalUrl(requestOptions)}/portals/${idOrSelf}`;\n\n  // default to a GET request\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"GET\" },\n    ...requestOptions\n  };\n\n  // send the request\n  return request(url, options);\n}\n"],"names":["message","code","response","url","options","this","name","originalMessage","prototype","Object","create","Error","ArcGISRequestError","constructor","ErrorTypes","_super","_this","tslib_1.__extends","ArcGISAuthError","getSession","retryLimit","tries","retryRequest","resolve","reject","then","session","newOptions","authentication","request","catch","e","Promise","params","error","_a","messageCode","errorCode","status","JSON","parse","statusMessage","keys","some","key","value","newParams","forEach","param","stringify","join","valueOf","encodeURIComponent","processParams","map","encodeParam","useFormData","requiresFormData","formData_1","FormData","Blob","filename","append","encodeQueryString","requestOptions","f","httpMethod","missingGlobals","recommendedPackages","fetch","push","bind","Function","fetchOptions","method","credentials","getToken","token","length","urlWithQueryString","maxUrlLength","body","encodeFormData","headers","ok","status_1","statusText","json","text","blob","data","checkForErrors","portal","id","idOrSelf","getPortalUrl","console","warn","apply","getPortal"],"mappings":"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"}