"use strict";
/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var check_for_errors_1 = require("./utils/check-for-errors");
var encode_form_data_1 = require("./utils/encode-form-data");
var encode_query_string_1 = require("./utils/encode-query-string");
var process_params_1 = require("./utils/process-params");
var ArcGISRequestError_1 = require("./utils/ArcGISRequestError");
/**
 * Generic method for making HTTP requests to ArcGIS REST API endpoints.
 *
 * ```js
 * import { request } from '@esri/arcgis-rest-request';
 *
 * request('https://www.arcgis.com/sharing/rest')
 *   .then((response) => {
 *     console.log(response.currentVersion); // => 5.2
 *   });
 * ```
 *
 * ```js
 * import { request, HTTPMethods } from '@esri/arcgis-rest-request';
 *
 * request('https://www.arcgis.com/sharing/rest', {
 *   httpMethod: "GET"
 * }).then((response) => {
 *   console.log(response.currentVersion); // => 5.2
 * });
 * ```
 *
 * ```js
 * import { request, HTTPMethods } from '@esri/arcgis-rest-request';
 *
 * request('https://www.arcgis.com/sharing/rest/search', {
 *   params: { q: 'parks' }
 * }).then((response) => {
 *   console.log(response.total); // => 78379
 * });
 * ```
 *
 * @param url - The URL of the ArcGIS REST API endpoint.
 * @param requestOptions - Options for the request, including parameters relevant to the endpoint.
 * @returns A Promise that will resolve with the data from the response.
 */
function request(url, requestOptions) {
    if (requestOptions === void 0) { requestOptions = { params: { f: "json" } }; }
    var options = tslib_1.__assign({ httpMethod: "POST" }, requestOptions);
    var missingGlobals = [];
    var recommendedPackages = [];
    // don't check for a global fetch if a custom implementation was passed through
    if (!options.fetch && typeof fetch !== "undefined") {
        options.fetch = fetch.bind(Function("return this")());
    }
    else {
        missingGlobals.push("`fetch`");
        recommendedPackages.push("`isomorphic-fetch`");
    }
    if (typeof Promise === "undefined") {
        missingGlobals.push("`Promise`");
        recommendedPackages.push("`es6-promise`");
    }
    if (typeof FormData === "undefined") {
        missingGlobals.push("`FormData`");
        recommendedPackages.push("`isomorphic-form-data`");
    }
    if (!options.fetch ||
        typeof Promise === "undefined" ||
        typeof FormData === "undefined") {
        throw new Error("`arcgis-rest-request` requires global variables for `fetch`, `Promise` and `FormData` to be present in the global scope. You are missing " + missingGlobals.join(", ") + ". We recommend installing the " + recommendedPackages.join(", ") + " modules at the root of your application to add these to the global scope. See https://bit.ly/2KNwWaJ for more info.");
    }
    var httpMethod = options.httpMethod, authentication = options.authentication;
    var params = tslib_1.__assign({ f: "json" }, requestOptions.params);
    var fetchOptions = {
        method: httpMethod,
        // ensures behavior mimics XMLHttpRequest. needed to support sending IWA cookies
        credentials: "same-origin"
    };
    return (authentication
        ? authentication.getToken(url, {
            fetch: options.fetch
        })
        : Promise.resolve(""))
        .then(function (token) {
        if (token.length) {
            params.token = token;
        }
        if (fetchOptions.method === "GET") {
            // encode the parameters into the query string
            var queryParams = encode_query_string_1.encodeQueryString(params);
            // dont append a '?' unless parameters are actually present
            var urlWithQueryString = queryParams === "" ? url : url + "?" + encode_query_string_1.encodeQueryString(params);
            if (options.maxUrlLength &&
                urlWithQueryString.length > options.maxUrlLength) {
                // the consumer specified a maximum length for URLs
                // and this would exceed it, so use post instead
                fetchOptions.method = "POST";
            }
            else {
                // just use GET
                url = urlWithQueryString;
            }
        }
        if (fetchOptions.method === "POST") {
            fetchOptions.body = encode_form_data_1.encodeFormData(params);
        }
        /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */
        if (!process_params_1.requiresFormData(params)) {
            fetchOptions.headers = {};
            fetchOptions.headers["Content-Type"] =
                "application/x-www-form-urlencoded";
        }
        return options.fetch(url, fetchOptions);
    })
        .then(function (response) {
        if (!response.ok) {
            // server responded w/ an actual error (404, 500, etc)
            var status_1 = response.status, statusText = response.statusText;
            throw new ArcGISRequestError_1.ArcGISRequestError(statusText, "HTTP " + status_1, response, url, options);
        }
        switch (params.f) {
            case "json":
                return response.json();
            case "geojson":
                return response.json();
            case "html":
                return response.text();
            case "text":
                return response.text();
            /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */
            case "image":
                return response.blob();
            /* istanbul ignore next */
            case "zip":
                return response.blob();
            /* istanbul ignore next */
            default:
                // hopefully we never need to handle JSON payloads when no f= parameter is set
                return response.blob();
        }
    })
        .then(function (data) {
        if (params.f === "json" || params.f === "geojson") {
            return check_for_errors_1.checkForErrors(data, url, params, options);
        }
        else {
            return data;
        }
    });
}
exports.request = request;
//# sourceMappingURL=request.js.map