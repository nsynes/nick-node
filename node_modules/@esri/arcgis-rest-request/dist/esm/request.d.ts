export declare type GrantTypes = "authorization_code" | "refresh_token" | "client_credentials" | "exchange_refresh_token";
export interface IParams {
    f?: ResponseFormats;
    [key: string]: any;
}
export interface IGenerateTokenParams extends IParams {
    username?: string;
    password?: string;
    expiration?: number;
    token?: string;
    serverUrl?: string;
}
export interface IFetchTokenParams extends IParams {
    client_id: string;
    client_secret?: string;
    grant_type: GrantTypes;
    redirect_uri?: string;
    refresh_token?: string;
    code?: string;
}
export interface ITokenRequestOptions {
    params?: IGenerateTokenParams | IFetchTokenParams;
    httpMethod?: HTTPMethods;
    fetch?: (input: RequestInfo, init?: RequestInit) => Promise<Response>;
}
/**
 * Authentication can be supplied to `request` via [`UserSession`](../../auth/UserSession/) or [`ApplicationSession`](../../auth/ApplicationSession/). Both classes extend `IAuthenticationManager`.
 * ```js
 * const session = new UserSession({
 *   username: "jsmith",
 *   password: "123456",
 *   // optional
 *   portal: "https://[yourserver]/arcgis/sharing/rest"
 * })
 *
 * request(url, { authentication: session })
 * ```
 */
export interface IAuthenticationManager {
    /**
     * Defaults to 'https://www.arcgis.com/sharing/rest'.
     */
    portal: string;
    getToken(url: string, requestOptions?: ITokenRequestOptions): Promise<string>;
}
/**
 * HTTP methods used by the ArcGIS REST API.
 */
export declare type HTTPMethods = "GET" | "POST";
/**
 * Valid response formats for the `f` parameter.
 */
export declare type ResponseFormats = "json" | "geojson" | "text" | "html" | "image" | "zip";
/**
 * Options for the `request()` method.
 */
export interface IRequestOptions {
    /**
     * Additional parameters to pass in the request.
     */
    params?: IParams;
    /**
     * The HTTP method to send the request with.
     */
    httpMethod?: HTTPMethods;
    /**
     * The instance of `IAuthenticationManager` to use to authenticate this request.
     */
    authentication?: IAuthenticationManager;
    /**
     * Base url for the portal you want to make the request to. Defaults to 'https://www.arcgis.com/sharing/rest'.
     */
    portal?: string;
    /**
     * The implementation of `fetch` to use. Defaults to a global `fetch`.
     */
    fetch?: (input: RequestInfo, init?: RequestInit) => Promise<Response>;
    /**
     * If the length of a GET request's URL exceeds `maxUrlLength` the request will use POST instead.
     */
    maxUrlLength?: number;
}
/**
 * Generic method for making HTTP requests to ArcGIS REST API endpoints.
 *
 * ```js
 * import { request } from '@esri/arcgis-rest-request';
 *
 * request('https://www.arcgis.com/sharing/rest')
 *   .then((response) => {
 *     console.log(response.currentVersion); // => 5.2
 *   });
 * ```
 *
 * ```js
 * import { request, HTTPMethods } from '@esri/arcgis-rest-request';
 *
 * request('https://www.arcgis.com/sharing/rest', {
 *   httpMethod: "GET"
 * }).then((response) => {
 *   console.log(response.currentVersion); // => 5.2
 * });
 * ```
 *
 * ```js
 * import { request, HTTPMethods } from '@esri/arcgis-rest-request';
 *
 * request('https://www.arcgis.com/sharing/rest/search', {
 *   params: { q: 'parks' }
 * }).then((response) => {
 *   console.log(response.total); // => 78379
 * });
 * ```
 *
 * @param url - The URL of the ArcGIS REST API endpoint.
 * @param requestOptions - Options for the request, including parameters relevant to the endpoint.
 * @returns A Promise that will resolve with the data from the response.
 */
export declare function request(url: string, requestOptions?: IRequestOptions): Promise<any>;
