/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
import * as tslib_1 from "tslib";
import { request, getPortalUrl } from "@esri/arcgis-rest-request";
import { moveItem, determineOwner } from "@esri/arcgis-rest-items";
/**
 * Create a new hosted feature service.
 *
 * ```js
 * import { createFeatureService } from '@esri/arcgis-rest-feature-service-admin';
 *
 * createFeatureService({
 *   authentication: userSession,
 *   item: {
 *     "name": "NewEmptyService",
 *     "capabilities": "Create,Delete,Query,Update,Editing"
 *   }
 * });
 * ```
 *
 * @param requestOptions - Options for the request
 * @returns A Promise that resolves with service details once the service has been created
 */
export function createFeatureService(requestOptions) {
    var owner = determineOwner(requestOptions);
    var baseUrl = getPortalUrl(requestOptions) + "/content/users/" + owner;
    var url = baseUrl + "/createService";
    // Create the service
    requestOptions.params = tslib_1.__assign({ createParameters: requestOptions.item, outputType: "featureService" }, requestOptions.params);
    if (!requestOptions.folderId || requestOptions.folderId === "/") {
        // If the service is destined for the root folder, just send the request and return the promise;
        // services are created in the root folder
        return request(url, requestOptions);
    }
    else {
        // If the service is destined for a subfolder, catch the results of the request and then move
        // the item to the desired folder
        return new Promise(function (resolve, reject) {
            request(url, requestOptions).then(function (createResults) {
                if (createResults.success) {
                    moveItem({
                        itemId: createResults.itemId,
                        folderId: requestOptions.folderId,
                        authentication: requestOptions.authentication
                    }).then(function (moveResults) {
                        if (moveResults.success) {
                            resolve(createResults);
                        }
                        else {
                            reject({ success: false });
                        }
                    });
                }
                else {
                    reject({ success: false });
                }
            });
        });
    }
}
//# sourceMappingURL=create.js.map